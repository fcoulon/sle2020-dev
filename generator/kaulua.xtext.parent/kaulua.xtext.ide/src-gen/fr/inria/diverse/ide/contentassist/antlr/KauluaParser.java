/*
 * generated by Xtext 2.19.0
 */
package fr.inria.diverse.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.inria.diverse.ide.contentassist.antlr.internal.InternalKauluaParser;
import fr.inria.diverse.services.KauluaGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class KauluaParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(KauluaGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, KauluaGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getProtocolAccess().getGroup(), "rule__Protocol__Group__0");
			builder.put(grammarAccess.getFeatureAccess().getGroup(), "rule__Feature__Group__0");
			builder.put(grammarAccess.getFeatureAccess().getGroup_4(), "rule__Feature__Group_4__0");
			builder.put(grammarAccess.getFeatureAccess().getGroup_5(), "rule__Feature__Group_5__0");
			builder.put(grammarAccess.getCapabilityAccess().getGroup(), "rule__Capability__Group__0");
			builder.put(grammarAccess.getCapabilityAccess().getGroup_1(), "rule__Capability__Group_1__0");
			builder.put(grammarAccess.getDependencyAccess().getGroup(), "rule__Dependency__Group__0");
			builder.put(grammarAccess.getProtocolAccess().getNameAssignment_1(), "rule__Protocol__NameAssignment_1");
			builder.put(grammarAccess.getProtocolAccess().getFeaturesAssignment_3(), "rule__Protocol__FeaturesAssignment_3");
			builder.put(grammarAccess.getProtocolAccess().getDependenciesAssignment_6(), "rule__Protocol__DependenciesAssignment_6");
			builder.put(grammarAccess.getFeatureAccess().getIsMandatoryAssignment_0(), "rule__Feature__IsMandatoryAssignment_0");
			builder.put(grammarAccess.getFeatureAccess().getNameAssignment_2(), "rule__Feature__NameAssignment_2");
			builder.put(grammarAccess.getFeatureAccess().getCapabilitiesAssignment_4_2(), "rule__Feature__CapabilitiesAssignment_4_2");
			builder.put(grammarAccess.getFeatureAccess().getAlternativeGroupAssignment_5_2(), "rule__Feature__AlternativeGroupAssignment_5_2");
			builder.put(grammarAccess.getCapabilityAccess().getNameAssignment_0(), "rule__Capability__NameAssignment_0");
			builder.put(grammarAccess.getCapabilityAccess().getDefinitionFileAssignment_1_1(), "rule__Capability__DefinitionFileAssignment_1_1");
			builder.put(grammarAccess.getDependencyAccess().getCallerAssignment_0(), "rule__Dependency__CallerAssignment_0");
			builder.put(grammarAccess.getDependencyAccess().getCalleeAssignment_2(), "rule__Dependency__CalleeAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private KauluaGrammarAccess grammarAccess;

	@Override
	protected InternalKauluaParser createParser() {
		InternalKauluaParser result = new InternalKauluaParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public KauluaGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(KauluaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
