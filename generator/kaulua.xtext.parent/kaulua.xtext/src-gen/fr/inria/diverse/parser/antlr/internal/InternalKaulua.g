/*
 * generated by Xtext 2.19.0
 */
grammar InternalKaulua;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.inria.diverse.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.inria.diverse.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.inria.diverse.services.KauluaGrammarAccess;

}

@parser::members {

 	private KauluaGrammarAccess grammarAccess;

    public InternalKauluaParser(TokenStream input, KauluaGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Protocol";
   	}

   	@Override
   	protected KauluaGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProtocol
entryRuleProtocol returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProtocolRule()); }
	iv_ruleProtocol=ruleProtocol
	{ $current=$iv_ruleProtocol.current; }
	EOF;

// Rule Protocol
ruleProtocol returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Protocol'
		{
			newLeafNode(otherlv_0, grammarAccess.getProtocolAccess().getProtocolKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getProtocolAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProtocolRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getProtocolAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProtocolAccess().getFeaturesFeatureParserRuleCall_3_0());
				}
				lv_features_3_0=ruleFeature
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProtocolRule());
					}
					add(
						$current,
						"features",
						lv_features_3_0,
						"fr.inria.diverse.Kaulua.Feature");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4='dependencies'
		{
			newLeafNode(otherlv_4, grammarAccess.getProtocolAccess().getDependenciesKeyword_4());
		}
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getProtocolAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProtocolAccess().getDependenciesDependencyParserRuleCall_6_0());
				}
				lv_dependencies_6_0=ruleDependency
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProtocolRule());
					}
					add(
						$current,
						"dependencies",
						lv_dependencies_6_0,
						"fr.inria.diverse.Kaulua.Dependency");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getProtocolAccess().getRightCurlyBracketKeyword_7());
		}
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getProtocolAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureRule()); }
	iv_ruleFeature=ruleFeature
	{ $current=$iv_ruleFeature.current; }
	EOF;

// Rule Feature
ruleFeature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_isMandatory_0_0='mandatory'
				{
					newLeafNode(lv_isMandatory_0_0, grammarAccess.getFeatureAccess().getIsMandatoryMandatoryKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFeatureRule());
					}
					setWithLastConsumed($current, "isMandatory", true, "mandatory");
				}
			)
		)?
		otherlv_1='feature'
		{
			newLeafNode(otherlv_1, grammarAccess.getFeatureAccess().getFeatureKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getFeatureAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFeatureRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getFeatureAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			otherlv_4='capabilities'
			{
				newLeafNode(otherlv_4, grammarAccess.getFeatureAccess().getCapabilitiesKeyword_4_0());
			}
			otherlv_5=':'
			{
				newLeafNode(otherlv_5, grammarAccess.getFeatureAccess().getColonKeyword_4_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFeatureAccess().getCapabilitiesCapabilityParserRuleCall_4_2_0());
					}
					lv_capabilities_6_0=ruleCapability
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFeatureRule());
						}
						add(
							$current,
							"capabilities",
							lv_capabilities_6_0,
							"fr.inria.diverse.Kaulua.Capability");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)?
		(
			otherlv_7='alternativeOf'
			{
				newLeafNode(otherlv_7, grammarAccess.getFeatureAccess().getAlternativeOfKeyword_5_0());
			}
			otherlv_8=':'
			{
				newLeafNode(otherlv_8, grammarAccess.getFeatureAccess().getColonKeyword_5_1());
			}
			(
				(
					lv_alternativeGroup_9_0=RULE_STRING
					{
						newLeafNode(lv_alternativeGroup_9_0, grammarAccess.getFeatureAccess().getAlternativeGroupSTRINGTerminalRuleCall_5_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFeatureRule());
						}
						setWithLastConsumed(
							$current,
							"alternativeGroup",
							lv_alternativeGroup_9_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)?
		otherlv_10='}'
		{
			newLeafNode(otherlv_10, grammarAccess.getFeatureAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleCapability
entryRuleCapability returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCapabilityRule()); }
	iv_ruleCapability=ruleCapability
	{ $current=$iv_ruleCapability.current; }
	EOF;

// Rule Capability
ruleCapability returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getCapabilityAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCapabilityRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_1='['
			{
				newLeafNode(otherlv_1, grammarAccess.getCapabilityAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				(
					lv_definitionFile_2_0=RULE_STRING
					{
						newLeafNode(lv_definitionFile_2_0, grammarAccess.getCapabilityAccess().getDefinitionFileSTRINGTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCapabilityRule());
						}
						setWithLastConsumed(
							$current,
							"definitionFile",
							lv_definitionFile_2_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			otherlv_3=']'
			{
				newLeafNode(otherlv_3, grammarAccess.getCapabilityAccess().getRightSquareBracketKeyword_1_2());
			}
		)?
	)
;

// Entry rule entryRuleDependency
entryRuleDependency returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDependencyRule()); }
	iv_ruleDependency=ruleDependency
	{ $current=$iv_ruleDependency.current; }
	EOF;

// Rule Dependency
ruleDependency returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDependencyRule());
					}
				}
				otherlv_0=RULE_QUALIFIER
				{
					newLeafNode(otherlv_0, grammarAccess.getDependencyAccess().getCallerCapabilityCrossReference_0_0());
				}
			)
		)
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getDependencyAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDependencyRule());
					}
				}
				otherlv_2=RULE_QUALIFIER
				{
					newLeafNode(otherlv_2, grammarAccess.getDependencyAccess().getCalleeCapabilityCrossReference_2_0());
				}
			)
		)
	)
;

RULE_QUALIFIER : RULE_ID ('.' RULE_ID)+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
