/*
 * generated by Xtext 2.19.0
 */
package fr.inria.diverse.serializer;

import com.google.inject.Inject;
import fr.inria.diverse.kaulua.Capability;
import fr.inria.diverse.kaulua.Dependency;
import fr.inria.diverse.kaulua.Feature;
import fr.inria.diverse.kaulua.KauluaPackage;
import fr.inria.diverse.kaulua.Protocol;
import fr.inria.diverse.services.KauluaGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class KauluaSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private KauluaGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == KauluaPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KauluaPackage.CAPABILITY:
				sequence_Capability(context, (Capability) semanticObject); 
				return; 
			case KauluaPackage.DEPENDENCY:
				sequence_Dependency(context, (Dependency) semanticObject); 
				return; 
			case KauluaPackage.FEATURE:
				sequence_Feature(context, (Feature) semanticObject); 
				return; 
			case KauluaPackage.PROTOCOL:
				sequence_Protocol(context, (Protocol) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Capability returns Capability
	 *
	 * Constraint:
	 *     (name=ID definitionFile=STRING?)
	 */
	protected void sequence_Capability(ISerializationContext context, Capability semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Dependency returns Dependency
	 *
	 * Constraint:
	 *     (caller=[Capability|QUALIFIER] callee=[Capability|QUALIFIER])
	 */
	protected void sequence_Dependency(ISerializationContext context, Dependency semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KauluaPackage.Literals.DEPENDENCY__CALLER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KauluaPackage.Literals.DEPENDENCY__CALLER));
			if (transientValues.isValueTransient(semanticObject, KauluaPackage.Literals.DEPENDENCY__CALLEE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KauluaPackage.Literals.DEPENDENCY__CALLEE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDependencyAccess().getCallerCapabilityQUALIFIERTerminalRuleCall_0_0_1(), semanticObject.eGet(KauluaPackage.Literals.DEPENDENCY__CALLER, false));
		feeder.accept(grammarAccess.getDependencyAccess().getCalleeCapabilityQUALIFIERTerminalRuleCall_2_0_1(), semanticObject.eGet(KauluaPackage.Literals.DEPENDENCY__CALLEE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Feature returns Feature
	 *
	 * Constraint:
	 *     (isMandatory?='mandatory'? name=ID capabilities+=Capability* alternativeGroup=STRING?)
	 */
	protected void sequence_Feature(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Protocol returns Protocol
	 *
	 * Constraint:
	 *     (name=STRING features+=Feature+ dependencies+=Dependency*)
	 */
	protected void sequence_Protocol(ISerializationContext context, Protocol semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
