/**
 * generated by Xtext 2.10.0
 */
package org.thingml.xtext.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.FormatterRequest;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.util.ExceptionAcceptor;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.thingml.xtext.constraints.ThingMLHelpers;
import org.thingml.xtext.services.ThingMLGrammarAccess;
import org.thingml.xtext.thingML.AbstractConnector;
import org.thingml.xtext.thingML.Action;
import org.thingml.xtext.thingML.ActionBlock;
import org.thingml.xtext.thingML.ArrayIndex;
import org.thingml.xtext.thingML.CompositeState;
import org.thingml.xtext.thingML.ConditionalAction;
import org.thingml.xtext.thingML.ConfigPropertyAssign;
import org.thingml.xtext.thingML.Configuration;
import org.thingml.xtext.thingML.Connector;
import org.thingml.xtext.thingML.Enumeration;
import org.thingml.xtext.thingML.EnumerationLiteral;
import org.thingml.xtext.thingML.Event;
import org.thingml.xtext.thingML.EventReference;
import org.thingml.xtext.thingML.Expression;
import org.thingml.xtext.thingML.ExpressionGroup;
import org.thingml.xtext.thingML.ExternalConnector;
import org.thingml.xtext.thingML.Function;
import org.thingml.xtext.thingML.FunctionCallExpression;
import org.thingml.xtext.thingML.FunctionCallStatement;
import org.thingml.xtext.thingML.Handler;
import org.thingml.xtext.thingML.Import;
import org.thingml.xtext.thingML.Instance;
import org.thingml.xtext.thingML.InternalPort;
import org.thingml.xtext.thingML.InternalTransition;
import org.thingml.xtext.thingML.LoopAction;
import org.thingml.xtext.thingML.Message;
import org.thingml.xtext.thingML.ObjectType;
import org.thingml.xtext.thingML.Parameter;
import org.thingml.xtext.thingML.PlatformAnnotation;
import org.thingml.xtext.thingML.Port;
import org.thingml.xtext.thingML.PrimitiveType;
import org.thingml.xtext.thingML.Property;
import org.thingml.xtext.thingML.PropertyAssign;
import org.thingml.xtext.thingML.PropertyReference;
import org.thingml.xtext.thingML.Protocol;
import org.thingml.xtext.thingML.ProvidedPort;
import org.thingml.xtext.thingML.Region;
import org.thingml.xtext.thingML.RequiredPort;
import org.thingml.xtext.thingML.SendAction;
import org.thingml.xtext.thingML.Session;
import org.thingml.xtext.thingML.State;
import org.thingml.xtext.thingML.StateContainer;
import org.thingml.xtext.thingML.Thing;
import org.thingml.xtext.thingML.ThingMLModel;
import org.thingml.xtext.thingML.Transition;
import org.thingml.xtext.thingML.Type;
import org.thingml.xtext.thingML.UnaryMinus;
import org.thingml.xtext.thingML.Variable;
import org.thingml.xtext.thingML.VariableAssignment;

@SuppressWarnings("all")
public class ThingMLFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private ThingMLGrammarAccess _thingMLGrammarAccess;
  
  @Override
  public void initialize(final FormatterRequest request) {
    super.initialize(request);
    request.setExceptionHandler(ExceptionAcceptor.IGNORING);
  }
  
  protected void _format(final ThingMLModel thingMLModel, @Extension final IFormattableDocument document) {
    EList<Type> _types = thingMLModel.getTypes();
    for (final Type types : _types) {
      document.<Type>format(types);
    }
    EList<Protocol> _protocols = thingMLModel.getProtocols();
    for (final Protocol protocols : _protocols) {
      document.<Protocol>format(protocols);
    }
    EList<Configuration> _configs = thingMLModel.getConfigs();
    for (final Configuration configs : _configs) {
      document.<Configuration>format(configs);
    }
    List<Expression> _allExpressions = ThingMLHelpers.getAllExpressions(thingMLModel);
    for (final Expression e : _allExpressions) {
      document.<Expression>format(e);
    }
  }
  
  protected void _format(final Configuration cfg, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Configuration>interior(cfg, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.regionFor(cfg).keyword("{"), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.surround(this.textRegionExtensions.regionFor(cfg).keyword("}"), _function_2);
    EList<Instance> _instances = cfg.getInstances();
    for (final Instance i : _instances) {
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.<Instance>append(i, _function_3);
    }
    EList<AbstractConnector> _connectors = cfg.getConnectors();
    for (final AbstractConnector c : _connectors) {
      document.<AbstractConnector>format(c);
    }
    EList<ConfigPropertyAssign> _propassigns = cfg.getPropassigns();
    for (final ConfigPropertyAssign cpa : _propassigns) {
      document.<ConfigPropertyAssign>format(cpa);
    }
  }
  
  protected void _format(final Import i, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Import>append(i, _function);
  }
  
  protected void _format(final Connector c, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Connector>interior(c, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.surround(this.textRegionExtensions.allRegionsFor(c).keyword("."), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Connector>append(c, _function_2);
  }
  
  protected void _format(final ExternalConnector c, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ExternalConnector>interior(c, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.surround(this.textRegionExtensions.allRegionsFor(c).keyword("."), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<ExternalConnector>append(c, _function_2);
  }
  
  protected void _format(final Protocol p, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Protocol>interior(p, _function);
    EList<PlatformAnnotation> _annotations = p.getAnnotations();
    for (final PlatformAnnotation annotations : _annotations) {
      {
        document.<PlatformAnnotation>format(annotations);
        int _size = p.getAnnotations().size();
        boolean _greaterThan = (_size > 1);
        if (_greaterThan) {
          final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
            it.newLine();
          };
          document.<PlatformAnnotation>prepend(annotations, _function_1);
        }
      }
    }
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(1, 2, Integer.MAX_VALUE);
    };
    document.<Protocol>append(p, _function_1);
  }
  
  protected void _format(final Enumeration e, @Extension final IFormattableDocument document) {
    this.formatType(e, document);
    int _size = e.getAnnotations().size();
    boolean _greaterThan = (_size > 0);
    if (_greaterThan) {
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.surround(this.textRegionExtensions.regionFor(e).keyword("{"), _function);
    } else {
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.append(this.textRegionExtensions.regionFor(e).keyword("{"), _function_1);
    }
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.surround(this.textRegionExtensions.regionFor(e).keyword("}"), _function_2);
    EList<EnumerationLiteral> _literals = e.getLiterals();
    for (final EnumerationLiteral l : _literals) {
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.<EnumerationLiteral>append(l, _function_3);
    }
  }
  
  protected void _format(final PrimitiveType primitiveType, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(primitiveType).keyword("<"), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.regionFor(primitiveType).keyword(">"), _function_1);
    this.formatType(primitiveType, document);
  }
  
  protected void _format(final ObjectType objectType, @Extension final IFormattableDocument document) {
    this.formatType(objectType, document);
  }
  
  protected void _format(final Thing thing, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Thing>interior(thing, _function);
    EList<Property> _properties = thing.getProperties();
    for (final Property p : _properties) {
      document.<Property>format(p);
    }
    EList<Port> _ports = thing.getPorts();
    for (final Port p_1 : _ports) {
      document.<Port>format(p_1);
    }
    EList<Message> _messages = thing.getMessages();
    for (final Message m : _messages) {
      document.<Message>format(m);
    }
    EList<Function> _functions = thing.getFunctions();
    for (final Function function : _functions) {
      document.<Function>format(function);
    }
    CompositeState _behaviour = thing.getBehaviour();
    boolean _tripleNotEquals = (_behaviour != null);
    if (_tripleNotEquals) {
      document.<CompositeState>format(thing.getBehaviour());
    }
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(document.append(this.textRegionExtensions.regionFor(thing).keyword("{"), _function_1), _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(document.surround(this.textRegionExtensions.regionFor(thing).keyword("}"), _function_3), _function_4);
  }
  
  protected void _format(final Message message, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(message).keyword("("), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(document.prepend(this.textRegionExtensions.regionFor(message).keyword(")"), _function_1), _function_2);
    EList<Parameter> _parameters = message.getParameters();
    for (final Parameter p : _parameters) {
      {
        int _indexOf = message.getParameters().indexOf(p);
        boolean _tripleNotEquals = (_indexOf != 0);
        if (_tripleNotEquals) {
          final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
            it.setSpace(" ");
          };
          document.<Parameter>prepend(p, _function_3);
        }
        final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
        };
        document.<Parameter>append(p, _function_4);
      }
    }
  }
  
  protected void _format(final Port port, @Extension final IFormattableDocument document) {
    this.formatPort(port, document);
  }
  
  protected void _format(final RequiredPort requiredPort, @Extension final IFormattableDocument document) {
    this.formatPort(requiredPort, document);
  }
  
  protected void _format(final ProvidedPort providedPort, @Extension final IFormattableDocument document) {
    this.formatPort(providedPort, document);
  }
  
  protected void _format(final InternalPort internalPort, @Extension final IFormattableDocument document) {
    this.formatPort(internalPort, document);
  }
  
  protected void _format(final Function function, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(document.append(this.textRegionExtensions.regionFor(function).keyword("("), _function), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.regionFor(function).keyword(")"), _function_2);
    EList<Parameter> _parameters = function.getParameters();
    for (final Parameter p : _parameters) {
      {
        int _indexOf = function.getParameters().indexOf(p);
        boolean _tripleNotEquals = (_indexOf != 0);
        if (_tripleNotEquals) {
          final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
            it.setSpace(" ");
          };
          document.<Parameter>prepend(p, _function_3);
        }
        final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
        };
        document.<Parameter>append(p, _function_4);
      }
    }
    Action _body = function.getBody();
    boolean _tripleNotEquals = (_body != null);
    if (_tripleNotEquals) {
      document.<Action>format(function.getBody());
    }
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(2, 2, Integer.MAX_VALUE);
    };
    document.<Function>append(function, _function_3);
  }
  
  protected void _format(final State state, @Extension final IFormattableDocument document) {
    this.formatState(state, document);
  }
  
  protected void _format(final CompositeState state, @Extension final IFormattableDocument document) {
    this.formatState(state, document);
    EList<State> _substate = state.getSubstate();
    for (final State sub : _substate) {
      document.<State>format(sub);
    }
    EList<Region> _region = state.getRegion();
    for (final Region r : _region) {
      this.formatStateContainer(r, document);
    }
    EList<Session> _session = state.getSession();
    for (final Session s : _session) {
      this.formatStateContainer(s, document);
    }
  }
  
  protected void _format(final Variable variable, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Variable>append(variable, _function);
  }
  
  protected void _format(final Action action, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Action>interior(action, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Action>append(action, _function_1);
  }
  
  protected void _format(final SendAction action, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(document.append(this.textRegionExtensions.regionFor(action).keyword("!"), _function), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(document.append(this.textRegionExtensions.regionFor(action).keyword("("), _function_2), _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(document.append(this.textRegionExtensions.regionFor(action).keyword(")"), _function_4), _function_5);
    EList<Expression> _parameters = action.getParameters();
    for (final Expression p : _parameters) {
      {
        final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
          it.setSpace(" ");
        };
        document.<Expression>prepend(p, _function_6);
        final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
        };
        document.<Expression>append(p, _function_7);
      }
    }
    final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<SendAction>append(action, _function_6);
  }
  
  protected void _format(final FunctionCallStatement action, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(document.append(this.textRegionExtensions.regionFor(action).keyword("("), _function), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(document.append(this.textRegionExtensions.regionFor(action).keyword(")"), _function_2), _function_3);
    EList<Expression> _parameters = action.getParameters();
    for (final Expression p : _parameters) {
      {
        final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
          it.setSpace(" ");
        };
        document.<Expression>prepend(p, _function_4);
        final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
        };
        document.<Expression>append(p, _function_5);
      }
    }
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<FunctionCallStatement>append(action, _function_4);
  }
  
  protected void _format(final FunctionCallExpression exp, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(document.append(this.textRegionExtensions.regionFor(exp).keyword("("), _function), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(document.append(this.textRegionExtensions.regionFor(exp).keyword(")"), _function_2), _function_3);
    EList<Expression> _parameters = exp.getParameters();
    for (final Expression p : _parameters) {
      {
        final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
          it.setSpace(" ");
        };
        document.<Expression>prepend(p, _function_4);
        final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
        };
        document.<Expression>append(p, _function_5);
      }
    }
  }
  
  protected void _format(final ActionBlock action, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ActionBlock>interior(action, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.regionFor(action).keyword("do"), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(action).keyword("end"), _function_2);
    EList<Action> _actions = action.getActions();
    for (final Action a : _actions) {
      document.<Action>format(a);
    }
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<ActionBlock>append(action, _function_3);
  }
  
  protected void _format(final ConditionalAction action, @Extension final IFormattableDocument document) {
    document.<Action>format(action.getAction());
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(this.textRegionExtensions.regionFor(action).keyword("("), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.regionFor(action).keyword(")"), _function_1);
    Action _elseAction = action.getElseAction();
    boolean _tripleNotEquals = (_elseAction != null);
    if (_tripleNotEquals) {
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.<ConditionalAction>append(action, _function_2);
      document.<Action>format(action.getElseAction());
    }
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<ConditionalAction>append(action, _function_3);
  }
  
  protected void _format(final VariableAssignment action, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(action).keyword("["), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.regionFor(action).keyword("]"), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<VariableAssignment>append(action, _function_2);
  }
  
  protected void _format(final PropertyAssign assign, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(assign).keyword("["), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.regionFor(assign).keyword("]"), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(assign).keyword("."), _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<PropertyAssign>append(assign, _function_3);
  }
  
  protected void _format(final ConfigPropertyAssign assign, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(assign).keyword("["), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.regionFor(assign).keyword("]"), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(assign).keyword("."), _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<ConfigPropertyAssign>append(assign, _function_3);
  }
  
  protected void _format(final LoopAction action, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(this.textRegionExtensions.regionFor(action).keyword("("), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.regionFor(action).keyword(")"), _function_1);
    document.<Action>format(action.getAction());
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<LoopAction>append(action, _function_2);
  }
  
  protected void _format(final PropertyReference exp, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(exp).keyword("."), _function);
  }
  
  protected void _format(final EventReference exp, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(exp).keyword("."), _function);
  }
  
  protected void _format(final ExpressionGroup exp, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(this.textRegionExtensions.regionFor(exp).keyword("("), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.regionFor(exp).keyword(")"), _function_1);
  }
  
  protected void _format(final ArrayIndex exp, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(this.textRegionExtensions.regionFor(exp).keyword("["), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(this.textRegionExtensions.regionFor(exp).keyword("]"), _function_1);
  }
  
  protected void _format(final UnaryMinus exp, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.append(this.textRegionExtensions.regionFor(exp).keyword("-"), _function);
  }
  
  protected void _format(final Handler h, @Extension final IFormattableDocument document) {
    Event _event = h.getEvent();
    boolean _tripleNotEquals = (_event != null);
    if (_tripleNotEquals) {
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.prepend(this.textRegionExtensions.regionFor(h).keyword("event"), _function);
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
        it.noSpace();
      };
      document.surround(this.textRegionExtensions.regionFor(h.getEvent()).keyword("?"), _function_1);
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.<Event>append(h.getEvent(), _function_2);
    }
    Expression _guard = h.getGuard();
    boolean _tripleNotEquals_1 = (_guard != null);
    if (_tripleNotEquals_1) {
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.<Expression>append(h.getGuard(), _function_3);
    }
    Action _action = h.getAction();
    boolean _tripleNotEquals_2 = (_action != null);
    if (_tripleNotEquals_2) {
      document.<Action>format(h.getAction());
    }
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Handler>append(document.<Handler>append(h, _function_4), _function_5);
  }
  
  /**
   * --- Helpers ---
   */
  public void formatStateContainer(final StateContainer container, @Extension final IFormattableDocument document) {
    EList<State> _substate = container.getSubstate();
    for (final State sub : _substate) {
      document.<State>format(sub);
    }
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<StateContainer>interior(container, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.regionFor(container).keyword("{"), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(document.surround(this.textRegionExtensions.regionFor(container).keyword("}"), _function_2), _function_3);
  }
  
  public void formatState(final State state, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<State>surround(state, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<State>interior(state, _function_1);
    EList<Property> _properties = state.getProperties();
    for (final Property p : _properties) {
      document.<Property>format(p);
    }
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.regionFor(state).keyword("{"), _function_2);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.surround(this.textRegionExtensions.regionFor(state).keyword("}"), _function_3);
    Action _entry = state.getEntry();
    boolean _tripleNotEquals = (_entry != null);
    if (_tripleNotEquals) {
      document.<Action>format(state.getEntry());
    }
    Action _exit = state.getExit();
    boolean _tripleNotEquals_1 = (_exit != null);
    if (_tripleNotEquals_1) {
      document.<Action>format(state.getExit());
    }
    EList<Transition> _outgoing = state.getOutgoing();
    for (final Transition t : _outgoing) {
      document.<Transition>format(t);
    }
    EList<InternalTransition> _internal = state.getInternal();
    for (final InternalTransition t_1 : _internal) {
      document.<InternalTransition>format(t_1);
    }
  }
  
  public void formatType(final Type type, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Type>interior(type, _function);
    EList<PlatformAnnotation> _annotations = type.getAnnotations();
    for (final PlatformAnnotation annotations : _annotations) {
      {
        document.<PlatformAnnotation>format(annotations);
        int _size = type.getAnnotations().size();
        boolean _greaterThan = (_size > 1);
        if (_greaterThan) {
          final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
            it.newLine();
          };
          document.<PlatformAnnotation>prepend(annotations, _function_1);
        }
      }
    }
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Type>append(type, _function_1);
  }
  
  public void formatPort(final Port port, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.regionFor(port).keyword("{"), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.surround(this.textRegionExtensions.regionFor(port).keyword("}"), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Port>interior(port, _function_2);
    EList<Message> _receives = port.getReceives();
    for (final Message m : _receives) {
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.<Message>append(m, _function_3);
    }
    EList<Message> _receives_1 = port.getReceives();
    for (final Message m_1 : _receives_1) {
      final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.<Message>append(m_1, _function_4);
    }
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Port>append(port, _function_5);
  }
  
  public void format(final Object state, final IFormattableDocument document) {
    if (state instanceof XtextResource) {
      _format((XtextResource)state, document);
      return;
    } else if (state instanceof CompositeState) {
      _format((CompositeState)state, document);
      return;
    } else if (state instanceof Connector) {
      _format((Connector)state, document);
      return;
    } else if (state instanceof Enumeration) {
      _format((Enumeration)state, document);
      return;
    } else if (state instanceof ExternalConnector) {
      _format((ExternalConnector)state, document);
      return;
    } else if (state instanceof InternalPort) {
      _format((InternalPort)state, document);
      return;
    } else if (state instanceof ObjectType) {
      _format((ObjectType)state, document);
      return;
    } else if (state instanceof PrimitiveType) {
      _format((PrimitiveType)state, document);
      return;
    } else if (state instanceof ProvidedPort) {
      _format((ProvidedPort)state, document);
      return;
    } else if (state instanceof RequiredPort) {
      _format((RequiredPort)state, document);
      return;
    } else if (state instanceof Thing) {
      _format((Thing)state, document);
      return;
    } else if (state instanceof ActionBlock) {
      _format((ActionBlock)state, document);
      return;
    } else if (state instanceof ArrayIndex) {
      _format((ArrayIndex)state, document);
      return;
    } else if (state instanceof ConditionalAction) {
      _format((ConditionalAction)state, document);
      return;
    } else if (state instanceof Configuration) {
      _format((Configuration)state, document);
      return;
    } else if (state instanceof EventReference) {
      _format((EventReference)state, document);
      return;
    } else if (state instanceof ExpressionGroup) {
      _format((ExpressionGroup)state, document);
      return;
    } else if (state instanceof Function) {
      _format((Function)state, document);
      return;
    } else if (state instanceof FunctionCallExpression) {
      _format((FunctionCallExpression)state, document);
      return;
    } else if (state instanceof FunctionCallStatement) {
      _format((FunctionCallStatement)state, document);
      return;
    } else if (state instanceof Handler) {
      _format((Handler)state, document);
      return;
    } else if (state instanceof LoopAction) {
      _format((LoopAction)state, document);
      return;
    } else if (state instanceof Message) {
      _format((Message)state, document);
      return;
    } else if (state instanceof Port) {
      _format((Port)state, document);
      return;
    } else if (state instanceof PropertyAssign) {
      _format((PropertyAssign)state, document);
      return;
    } else if (state instanceof PropertyReference) {
      _format((PropertyReference)state, document);
      return;
    } else if (state instanceof Protocol) {
      _format((Protocol)state, document);
      return;
    } else if (state instanceof SendAction) {
      _format((SendAction)state, document);
      return;
    } else if (state instanceof State) {
      _format((State)state, document);
      return;
    } else if (state instanceof UnaryMinus) {
      _format((UnaryMinus)state, document);
      return;
    } else if (state instanceof Variable) {
      _format((Variable)state, document);
      return;
    } else if (state instanceof VariableAssignment) {
      _format((VariableAssignment)state, document);
      return;
    } else if (state instanceof Action) {
      _format((Action)state, document);
      return;
    } else if (state instanceof ConfigPropertyAssign) {
      _format((ConfigPropertyAssign)state, document);
      return;
    } else if (state instanceof Import) {
      _format((Import)state, document);
      return;
    } else if (state instanceof ThingMLModel) {
      _format((ThingMLModel)state, document);
      return;
    } else if (state instanceof EObject) {
      _format((EObject)state, document);
      return;
    } else if (state == null) {
      _format((Void)null, document);
      return;
    } else if (state != null) {
      _format(state, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(state, document).toString());
    }
  }
}
