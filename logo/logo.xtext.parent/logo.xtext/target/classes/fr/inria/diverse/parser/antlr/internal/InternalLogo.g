/*
 * generated by Xtext 2.19.0
 */
grammar InternalLogo;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.inria.diverse.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.inria.diverse.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.inria.diverse.services.LogoGrammarAccess;

}

@parser::members {

 	private LogoGrammarAccess grammarAccess;

    public InternalLogoParser(TokenStream input, LogoGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "LogoProgram";
   	}

   	@Override
   	protected LogoGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleLogoProgram
entryRuleLogoProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogoProgramRule()); }
	iv_ruleLogoProgram=ruleLogoProgram
	{ $current=$iv_ruleLogoProgram.current; }
	EOF;

// Rule LogoProgram
ruleLogoProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLogoProgramAccess().getLogoProgramAction_0(),
					$current);
			}
		)
		otherlv_1='LogoProgram'
		{
			newLeafNode(otherlv_1, grammarAccess.getLogoProgramAccess().getLogoProgramKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getLogoProgramAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getLogoProgramAccess().getInstructionsInstructionParserRuleCall_3_0_0());
					}
					lv_instructions_3_0=ruleInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogoProgramRule());
						}
						add(
							$current,
							"instructions",
							lv_instructions_3_0,
							"fr.inria.diverse.Logo.Instruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=';'
				{
					newLeafNode(otherlv_4, grammarAccess.getLogoProgramAccess().getSemicolonKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getLogoProgramAccess().getInstructionsInstructionParserRuleCall_3_1_1_0());
						}
						lv_instructions_5_0=ruleInstruction
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLogoProgramRule());
							}
							add(
								$current,
								"instructions",
								lv_instructions_5_0,
								"fr.inria.diverse.Logo.Instruction");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getLogoProgramAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInstructionRule()); }
	iv_ruleInstruction=ruleInstruction
	{ $current=$iv_ruleInstruction.current; }
	EOF;

// Rule Instruction
ruleInstruction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getBackParserRuleCall_0());
		}
		this_Back_0=ruleBack
		{
			$current = $this_Back_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getForwardParserRuleCall_1());
		}
		this_Forward_1=ruleForward
		{
			$current = $this_Forward_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getLeftParserRuleCall_2());
		}
		this_Left_2=ruleLeft
		{
			$current = $this_Left_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getRightParserRuleCall_3());
		}
		this_Right_3=ruleRight
		{
			$current = $this_Right_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getPenDownParserRuleCall_4());
		}
		this_PenDown_4=rulePenDown
		{
			$current = $this_PenDown_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getPenUpParserRuleCall_5());
		}
		this_PenUp_5=rulePenUp
		{
			$current = $this_PenUp_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getClearParserRuleCall_6());
		}
		this_Clear_6=ruleClear
		{
			$current = $this_Clear_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getProcCallParserRuleCall_7());
		}
		this_ProcCall_7=ruleProcCall
		{
			$current = $this_ProcCall_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getProcDeclarationParserRuleCall_8());
		}
		this_ProcDeclaration_8=ruleProcDeclaration
		{
			$current = $this_ProcDeclaration_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getBlockParserRuleCall_9());
		}
		this_Block_9=ruleBlock
		{
			$current = $this_Block_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getIfParserRuleCall_10());
		}
		this_If_10=ruleIf
		{
			$current = $this_If_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getRepeatParserRuleCall_11());
		}
		this_Repeat_11=ruleRepeat
		{
			$current = $this_Repeat_11.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getInstructionAccess().getWhileParserRuleCall_12());
		}
		this_While_12=ruleWhile
		{
			$current = $this_While_12.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getAddExpParserRuleCall_0());
		}
		this_AddExp_0=ruleAddExp
		{
			$current = $this_AddExp_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					('==')=>
					otherlv_1='=='
					{
						newLeafNode(otherlv_1, grammarAccess.getExpressionAccess().getEqualsSignEqualsSignKeyword_1_0_0());
					}
				)
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionAccess().getEqualsLhsAction_1_0_1(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionAccess().getRhsExpressionParserRuleCall_1_0_2_0());
						}
						lv_rhs_3_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionRule());
							}
							set(
								$current,
								"rhs",
								lv_rhs_3_0,
								"fr.inria.diverse.Logo.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					('>')=>
					otherlv_4='>'
					{
						newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getGreaterThanSignKeyword_1_1_0());
					}
				)
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionAccess().getGreaterLhsAction_1_1_1(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionAccess().getRhsExpressionParserRuleCall_1_1_2_0());
						}
						lv_rhs_6_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionRule());
							}
							set(
								$current,
								"rhs",
								lv_rhs_6_0,
								"fr.inria.diverse.Logo.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					('<')=>
					otherlv_7='<'
					{
						newLeafNode(otherlv_7, grammarAccess.getExpressionAccess().getLessThanSignKeyword_1_2_0());
					}
				)
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionAccess().getLowerLhsAction_1_2_1(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionAccess().getRhsExpressionParserRuleCall_1_2_2_0());
						}
						lv_rhs_9_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionRule());
							}
							set(
								$current,
								"rhs",
								lv_rhs_9_0,
								"fr.inria.diverse.Logo.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
	)
;

// Entry rule entryRuleAddExp
entryRuleAddExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddExpRule()); }
	iv_ruleAddExp=ruleAddExp
	{ $current=$iv_ruleAddExp.current; }
	EOF;

// Rule AddExp
ruleAddExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAddExpAccess().getMultExprParserRuleCall_0());
		}
		this_MultExpr_0=ruleMultExpr
		{
			$current = $this_MultExpr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					('+')=>
					otherlv_1='+'
					{
						newLeafNode(otherlv_1, grammarAccess.getAddExpAccess().getPlusSignKeyword_1_0_0());
					}
				)
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getAddExpAccess().getPlusLhsAction_1_0_1(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getAddExpAccess().getRhsExpressionParserRuleCall_1_0_2_0());
						}
						lv_rhs_3_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAddExpRule());
							}
							set(
								$current,
								"rhs",
								lv_rhs_3_0,
								"fr.inria.diverse.Logo.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					('-')=>
					otherlv_4='-'
					{
						newLeafNode(otherlv_4, grammarAccess.getAddExpAccess().getHyphenMinusKeyword_1_1_0());
					}
				)
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getAddExpAccess().getMinusLhsAction_1_1_1(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getAddExpAccess().getRhsExpressionParserRuleCall_1_1_2_0());
						}
						lv_rhs_6_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAddExpRule());
							}
							set(
								$current,
								"rhs",
								lv_rhs_6_0,
								"fr.inria.diverse.Logo.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
	)
;

// Entry rule entryRuleMultExpr
entryRuleMultExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultExprRule()); }
	iv_ruleMultExpr=ruleMultExpr
	{ $current=$iv_ruleMultExpr.current; }
	EOF;

// Rule MultExpr
ruleMultExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultExprAccess().getUnaryExpParserRuleCall_0());
		}
		this_UnaryExp_0=ruleUnaryExp
		{
			$current = $this_UnaryExp_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					('*')=>
					otherlv_1='*'
					{
						newLeafNode(otherlv_1, grammarAccess.getMultExprAccess().getAsteriskKeyword_1_0_0());
					}
				)
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getMultExprAccess().getMultLhsAction_1_0_1(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getMultExprAccess().getRhsExpressionParserRuleCall_1_0_2_0());
						}
						lv_rhs_3_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMultExprRule());
							}
							set(
								$current,
								"rhs",
								lv_rhs_3_0,
								"fr.inria.diverse.Logo.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					('/')=>
					otherlv_4='/'
					{
						newLeafNode(otherlv_4, grammarAccess.getMultExprAccess().getSolidusKeyword_1_1_0());
					}
				)
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getMultExprAccess().getDivLhsAction_1_1_1(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getMultExprAccess().getRhsExpressionParserRuleCall_1_1_2_0());
						}
						lv_rhs_6_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMultExprRule());
							}
							set(
								$current,
								"rhs",
								lv_rhs_6_0,
								"fr.inria.diverse.Logo.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
	)
;

// Entry rule entryRuleUnaryExp
entryRuleUnaryExp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryExpRule()); }
	iv_ruleUnaryExp=ruleUnaryExp
	{ $current=$iv_ruleUnaryExp.current; }
	EOF;

// Rule UnaryExp
ruleUnaryExp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getUnaryExpAccess().getCosParserRuleCall_0());
		}
		this_Cos_0=ruleCos
		{
			$current = $this_Cos_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnaryExpAccess().getSinParserRuleCall_1());
		}
		this_Sin_1=ruleSin
		{
			$current = $this_Sin_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnaryExpAccess().getTanParserRuleCall_2());
		}
		this_Tan_2=ruleTan
		{
			$current = $this_Tan_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnaryExpAccess().getProcCallParserRuleCall_3());
		}
		this_ProcCall_3=ruleProcCall
		{
			$current = $this_ProcCall_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnaryExpAccess().getPrimaryParserRuleCall_4());
		}
		this_Primary_4=rulePrimary
		{
			$current = $this_Primary_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getConstantParserRuleCall_0());
		}
		this_Constant_0=ruleConstant
		{
			$current = $this_Constant_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getParameterCallParserRuleCall_1());
		}
		this_ParameterCall_1=ruleParameterCall
		{
			$current = $this_ParameterCall_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBack
entryRuleBack returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBackRule()); }
	iv_ruleBack=ruleBack
	{ $current=$iv_ruleBack.current; }
	EOF;

// Rule Back
ruleBack returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBackAccess().getBackAction_0(),
					$current);
			}
		)
		otherlv_1='Back'
		{
			newLeafNode(otherlv_1, grammarAccess.getBackAccess().getBackKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBackAccess().getStepsExpressionParserRuleCall_2_0());
				}
				lv_steps_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBackRule());
					}
					set(
						$current,
						"steps",
						lv_steps_2_0,
						"fr.inria.diverse.Logo.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleForward
entryRuleForward returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForwardRule()); }
	iv_ruleForward=ruleForward
	{ $current=$iv_ruleForward.current; }
	EOF;

// Rule Forward
ruleForward returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getForwardAccess().getForwardAction_0(),
					$current);
			}
		)
		otherlv_1='Forward'
		{
			newLeafNode(otherlv_1, grammarAccess.getForwardAccess().getForwardKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForwardAccess().getStepsExpressionParserRuleCall_2_0());
				}
				lv_steps_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForwardRule());
					}
					set(
						$current,
						"steps",
						lv_steps_2_0,
						"fr.inria.diverse.Logo.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLeft
entryRuleLeft returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLeftRule()); }
	iv_ruleLeft=ruleLeft
	{ $current=$iv_ruleLeft.current; }
	EOF;

// Rule Left
ruleLeft returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLeftAccess().getLeftAction_0(),
					$current);
			}
		)
		otherlv_1='Left'
		{
			newLeafNode(otherlv_1, grammarAccess.getLeftAccess().getLeftKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLeftAccess().getAngleExpressionParserRuleCall_2_0());
				}
				lv_angle_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLeftRule());
					}
					set(
						$current,
						"angle",
						lv_angle_2_0,
						"fr.inria.diverse.Logo.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRight
entryRuleRight returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRightRule()); }
	iv_ruleRight=ruleRight
	{ $current=$iv_ruleRight.current; }
	EOF;

// Rule Right
ruleRight returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRightAccess().getRightAction_0(),
					$current);
			}
		)
		otherlv_1='Right'
		{
			newLeafNode(otherlv_1, grammarAccess.getRightAccess().getRightKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRightAccess().getAngleExpressionParserRuleCall_2_0());
				}
				lv_angle_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRightRule());
					}
					set(
						$current,
						"angle",
						lv_angle_2_0,
						"fr.inria.diverse.Logo.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePenDown
entryRulePenDown returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPenDownRule()); }
	iv_rulePenDown=rulePenDown
	{ $current=$iv_rulePenDown.current; }
	EOF;

// Rule PenDown
rulePenDown returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPenDownAccess().getPenDownAction_0(),
					$current);
			}
		)
		otherlv_1='PenDown'
		{
			newLeafNode(otherlv_1, grammarAccess.getPenDownAccess().getPenDownKeyword_1());
		}
	)
;

// Entry rule entryRulePenUp
entryRulePenUp returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPenUpRule()); }
	iv_rulePenUp=rulePenUp
	{ $current=$iv_rulePenUp.current; }
	EOF;

// Rule PenUp
rulePenUp returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPenUpAccess().getPenUpAction_0(),
					$current);
			}
		)
		otherlv_1='PenUp'
		{
			newLeafNode(otherlv_1, grammarAccess.getPenUpAccess().getPenUpKeyword_1());
		}
	)
;

// Entry rule entryRuleClear
entryRuleClear returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClearRule()); }
	iv_ruleClear=ruleClear
	{ $current=$iv_ruleClear.current; }
	EOF;

// Rule Clear
ruleClear returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getClearAccess().getClearAction_0(),
					$current);
			}
		)
		otherlv_1='Clear'
		{
			newLeafNode(otherlv_1, grammarAccess.getClearAccess().getClearKeyword_1());
		}
	)
;

// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	iv_ruleConstant=ruleConstant
	{ $current=$iv_ruleConstant.current; }
	EOF;

// Rule Constant
ruleConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getConstantAccess().getConstantAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConstantAccess().getValueEDoubleParserRuleCall_1_0());
				}
				lv_value_1_0=ruleEDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConstantRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"fr.inria.diverse.Logo.EDouble");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleProcCall
entryRuleProcCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcCallRule()); }
	iv_ruleProcCall=ruleProcCall
	{ $current=$iv_ruleProcCall.current; }
	EOF;

// Rule ProcCall
ruleProcCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getProcCallAccess().getProcCallAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProcCallRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getProcCallAccess().getDeclarationProcDeclarationCrossReference_1_0());
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getProcCallAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getProcCallAccess().getActualArgsExpressionParserRuleCall_3_0_0());
					}
					lv_actualArgs_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProcCallRule());
						}
						add(
							$current,
							"actualArgs",
							lv_actualArgs_3_0,
							"fr.inria.diverse.Logo.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getProcCallAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getProcCallAccess().getActualArgsExpressionParserRuleCall_3_1_1_0());
						}
						lv_actualArgs_5_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getProcCallRule());
							}
							add(
								$current,
								"actualArgs",
								lv_actualArgs_5_0,
								"fr.inria.diverse.Logo.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getProcCallAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleProcDeclaration
entryRuleProcDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcDeclarationRule()); }
	iv_ruleProcDeclaration=ruleProcDeclaration
	{ $current=$iv_ruleProcDeclaration.current; }
	EOF;

// Rule ProcDeclaration
ruleProcDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getProcDeclarationAccess().getProcDeclarationAction_0(),
					$current);
			}
		)
		otherlv_1='Proc'
		{
			newLeafNode(otherlv_1, grammarAccess.getProcDeclarationAccess().getProcKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getProcDeclarationAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProcDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getProcDeclarationAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getProcDeclarationAccess().getArgsParameterParserRuleCall_4_0_0());
					}
					lv_args_4_0=ruleParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProcDeclarationRule());
						}
						add(
							$current,
							"args",
							lv_args_4_0,
							"fr.inria.diverse.Logo.Parameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getProcDeclarationAccess().getCommaKeyword_4_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getProcDeclarationAccess().getArgsParameterParserRuleCall_4_1_1_0());
						}
						lv_args_6_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getProcDeclarationRule());
							}
							add(
								$current,
								"args",
								lv_args_6_0,
								"fr.inria.diverse.Logo.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getProcDeclarationAccess().getRightParenthesisKeyword_5());
		}
		otherlv_8='{'
		{
			newLeafNode(otherlv_8, grammarAccess.getProcDeclarationAccess().getLeftCurlyBracketKeyword_6());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getProcDeclarationAccess().getInstructionsInstructionParserRuleCall_7_0_0());
					}
					lv_instructions_9_0=ruleInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProcDeclarationRule());
						}
						add(
							$current,
							"instructions",
							lv_instructions_9_0,
							"fr.inria.diverse.Logo.Instruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_10=';'
				{
					newLeafNode(otherlv_10, grammarAccess.getProcDeclarationAccess().getSemicolonKeyword_7_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getProcDeclarationAccess().getInstructionsInstructionParserRuleCall_7_1_1_0());
						}
						lv_instructions_11_0=ruleInstruction
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getProcDeclarationRule());
							}
							add(
								$current,
								"instructions",
								lv_instructions_11_0,
								"fr.inria.diverse.Logo.Instruction");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_12='Return'
			{
				newLeafNode(otherlv_12, grammarAccess.getProcDeclarationAccess().getReturnKeyword_8_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getProcDeclarationAccess().getInstructionsExpressionParserRuleCall_8_1_0());
					}
					lv_instructions_13_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProcDeclarationRule());
						}
						add(
							$current,
							"instructions",
							lv_instructions_13_0,
							"fr.inria.diverse.Logo.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_14='}'
		{
			newLeafNode(otherlv_14, grammarAccess.getProcDeclarationAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleBlock=ruleBlock
	{ $current=$iv_ruleBlock.current; }
	EOF;

// Rule Block
ruleBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBlockAccess().getBlockAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBlockAccess().getInstructionsInstructionParserRuleCall_2_0_0());
					}
					lv_instructions_2_0=ruleInstruction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlockRule());
						}
						add(
							$current,
							"instructions",
							lv_instructions_2_0,
							"fr.inria.diverse.Logo.Instruction");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=';'
				{
					newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getSemicolonKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getBlockAccess().getInstructionsInstructionParserRuleCall_2_1_1_0());
						}
						lv_instructions_4_0=ruleInstruction
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBlockRule());
							}
							add(
								$current,
								"instructions",
								lv_instructions_4_0,
								"fr.inria.diverse.Logo.Instruction");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleIf
entryRuleIf returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfRule()); }
	iv_ruleIf=ruleIf
	{ $current=$iv_ruleIf.current; }
	EOF;

// Rule If
ruleIf returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIfAccess().getIfAction_0(),
					$current);
			}
		)
		otherlv_1='If'
		{
			newLeafNode(otherlv_1, grammarAccess.getIfAccess().getIfKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getConditionExpressionParserRuleCall_2_0());
				}
				lv_condition_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfRule());
					}
					set(
						$current,
						"condition",
						lv_condition_2_0,
						"fr.inria.diverse.Logo.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getThenPartBlockParserRuleCall_3_0());
				}
				lv_thenPart_3_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfRule());
					}
					set(
						$current,
						"thenPart",
						lv_thenPart_3_0,
						"fr.inria.diverse.Logo.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getElsePartBlockParserRuleCall_4_0());
				}
				lv_elsePart_4_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfRule());
					}
					set(
						$current,
						"elsePart",
						lv_elsePart_4_0,
						"fr.inria.diverse.Logo.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleRepeat
entryRuleRepeat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRepeatRule()); }
	iv_ruleRepeat=ruleRepeat
	{ $current=$iv_ruleRepeat.current; }
	EOF;

// Rule Repeat
ruleRepeat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRepeatAccess().getRepeatAction_0(),
					$current);
			}
		)
		otherlv_1='Repeat'
		{
			newLeafNode(otherlv_1, grammarAccess.getRepeatAccess().getRepeatKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRepeatAccess().getConditionExpressionParserRuleCall_2_0());
				}
				lv_condition_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepeatRule());
					}
					set(
						$current,
						"condition",
						lv_condition_2_0,
						"fr.inria.diverse.Logo.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRepeatAccess().getBlockBlockParserRuleCall_3_0());
				}
				lv_block_3_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepeatRule());
					}
					set(
						$current,
						"block",
						lv_block_3_0,
						"fr.inria.diverse.Logo.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleWhile
entryRuleWhile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileRule()); }
	iv_ruleWhile=ruleWhile
	{ $current=$iv_ruleWhile.current; }
	EOF;

// Rule While
ruleWhile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getWhileAccess().getWhileAction_0(),
					$current);
			}
		)
		otherlv_1='While'
		{
			newLeafNode(otherlv_1, grammarAccess.getWhileAccess().getWhileKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileAccess().getConditionExpressionParserRuleCall_2_0());
				}
				lv_condition_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileRule());
					}
					set(
						$current,
						"condition",
						lv_condition_2_0,
						"fr.inria.diverse.Logo.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileAccess().getBlockBlockParserRuleCall_3_0());
				}
				lv_block_3_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileRule());
					}
					set(
						$current,
						"block",
						lv_block_3_0,
						"fr.inria.diverse.Logo.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleParameterCall
entryRuleParameterCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterCallRule()); }
	iv_ruleParameterCall=ruleParameterCall
	{ $current=$iv_ruleParameterCall.current; }
	EOF;

// Rule ParameterCall
ruleParameterCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getParameterCallAccess().getParameterCallAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterCallRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getParameterCallAccess().getParameterParameterCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleCos
entryRuleCos returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCosRule()); }
	iv_ruleCos=ruleCos
	{ $current=$iv_ruleCos.current; }
	EOF;

// Rule Cos
ruleCos returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getCosAccess().getCosAction_0(),
					$current);
			}
		)
		otherlv_1='Cos'
		{
			newLeafNode(otherlv_1, grammarAccess.getCosAccess().getCosKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCosAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCosRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"fr.inria.diverse.Logo.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSin
entryRuleSin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSinRule()); }
	iv_ruleSin=ruleSin
	{ $current=$iv_ruleSin.current; }
	EOF;

// Rule Sin
ruleSin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSinAccess().getSinAction_0(),
					$current);
			}
		)
		otherlv_1='Sin'
		{
			newLeafNode(otherlv_1, grammarAccess.getSinAccess().getSinKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSinAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSinRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"fr.inria.diverse.Logo.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTan
entryRuleTan returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTanRule()); }
	iv_ruleTan=ruleTan
	{ $current=$iv_ruleTan.current; }
	EOF;

// Rule Tan
ruleTan returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTanAccess().getTanAction_0(),
					$current);
			}
		)
		otherlv_1='Tan'
		{
			newLeafNode(otherlv_1, grammarAccess.getTanAccess().getTanKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTanAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTanRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"fr.inria.diverse.Logo.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEDouble
entryRuleEDouble returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEDoubleRule()); }
	iv_ruleEDouble=ruleEDouble
	{ $current=$iv_ruleEDouble.current.getText(); }
	EOF;

// Rule EDouble
ruleEDouble returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEDoubleAccess().getHyphenMinusKeyword_0());
			}
		)?
		(
			this_INT_1=RULE_INT
			{
				$current.merge(this_INT_1);
			}
			{
				newLeafNode(this_INT_1, grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_1());
			}
		)?
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEDoubleAccess().getFullStopKeyword_2());
		}
		this_INT_3=RULE_INT
		{
			$current.merge(this_INT_3);
		}
		{
			newLeafNode(this_INT_3, grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_3());
		}
		(
			(
				kw='E'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEDoubleAccess().getEKeyword_4_0_0());
				}
				    |
				kw='e'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEDoubleAccess().getEKeyword_4_0_1());
				}
			)
			(
				kw='-'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEDoubleAccess().getHyphenMinusKeyword_4_1());
				}
			)?
			this_INT_7=RULE_INT
			{
				$current.merge(this_INT_7);
			}
			{
				newLeafNode(this_INT_7, grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_4_2());
			}
		)?
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getParameterAccess().getParameterAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
