// automatically generated by Xtext
grammar fr.inria.diverse.Logo with org.eclipse.xtext.common.Terminals

import "http://kmLogo"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
//import "http://kmLogo/ASM" as ASM
import "platform:/resource/logo.model/model/ASMLogo.ecore#//ASM" as ASM

LogoProgram returns ASM::LogoProgram:
	{ASM::LogoProgram}
	'LogoProgram'
	'{'
	( instructions+=Instruction (";" instructions+=Instruction)* )?
	'}';

Instruction returns ASM::Instruction:
	Back | Forward | Left | Right | PenDown | PenUp | Clear | ProcCall | ProcDeclaration | Block | If |
	Repeat | While
	;

Expression returns ASM::Expression:
	AddExp ( -> '==' {ASM::Equals.lhs=current} rhs=Expression | -> '>' {ASM::Greater.lhs=current} rhs=Expression | -> '<' {ASM::Lower.lhs=current} rhs=Expression)?
	;

AddExp returns ASM::Expression:
	MultExpr ( -> '+' {ASM::Plus.lhs=current} rhs=Expression | -> '-' {ASM::Minus.lhs=current} rhs=Expression)?
;

MultExpr returns ASM::Expression:
	UnaryExp ( -> '*' {ASM::Mult.lhs=current} rhs=Expression | -> '/' {ASM::Div.lhs=current} rhs=Expression)?
;

UnaryExp returns ASM::Expression:
	Cos | Sin | Tan | ProcCall | Primary
;

Primary returns ASM::Expression:
	Constant | ParameterCall
;

Back returns ASM::Back:
	{ASM::Back}
	'Back' steps=Expression
	;

Forward returns ASM::Forward:
	{ASM::Forward}
	'Forward'
	steps=Expression
	;

Left returns ASM::Left:
	{ASM::Left}
	'Left'angle=Expression
	;

Right returns ASM::Right:
	{ASM::Right}
	'Right' angle=Expression
	;

PenDown returns ASM::PenDown:
	{ASM::PenDown}
	'PenDown';

PenUp returns ASM::PenUp:
	{ASM::PenUp}
	'PenUp';

Clear returns ASM::Clear:
	{ASM::Clear}
	'Clear';

Constant returns ASM::Constant:
	{ASM::Constant}
	value=EDouble
	;

ProcCall returns ASM::ProcCall:
	{ASM::ProcCall}
	declaration=[ASM::ProcDeclaration|ID] '(' ( actualArgs+=Expression ("," actualArgs+=Expression)* )? ')'
	;

ProcDeclaration returns ASM::ProcDeclaration:
	{ASM::ProcDeclaration}
	'Proc'name=ID '(' (args+=Parameter ("," args+=Parameter)*)? ')'
	'{'
		(instructions+=Instruction (";" instructions+=Instruction)*)?
		('Return' instructions+=Expression)?
	'}';

Block returns ASM::Block:
	{ASM::Block}
	'{'
	( instructions+=Instruction (";" instructions+=Instruction)* )?
	'}';

If returns ASM::If:
	{ASM::If}
	'If' condition=Expression
	thenPart=Block
	(elsePart=Block)?
	;

Repeat returns ASM::Repeat:
	{ASM::Repeat}
	'Repeat' condition=Expression
	block=Block
	;

While returns ASM::While:
	{ASM::While}
	'While' condition=Expression
	block=Block
	;

ParameterCall returns ASM::ParameterCall:
	{ASM::ParameterCall}
	parameter=[ASM::Parameter|ID]
	;

Cos returns ASM::Cos:
	{ASM::Cos}
	'Cos' expression=Expression
	;

Sin returns ASM::Sin:
	{ASM::Sin}
	'Sin' expression=Expression
	;

Tan returns ASM::Tan:
	{ASM::Tan}
	'Tan' expression=Expression
	;

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?;

Parameter returns ASM::Parameter:
	{ASM::Parameter}
	name=ID
	;
