/*
 * generated by Xtext 2.19.0
 */
package fr.inria.diverse.formatting2

import com.google.inject.Inject
import fr.inria.diverse.services.LogoGrammarAccess
import kmLogo.ASM.Back
import kmLogo.ASM.LogoProgram
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import kmLogo.ASM.Block

class LogoFormatter extends AbstractFormatter2 {
	
	@Inject extension LogoGrammarAccess

	def dispatch void format(LogoProgram logoProgram, extension IFormattableDocument document) {
		
		logoProgram.interior[indent]
		logoProgram.regionFor.keyword("{").append[newLine]
		logoProgram.regionFor.keyword("}").surround[newLine]
		
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (instruction : logoProgram.instructions) {
			instruction.format
		}
	}

	def dispatch void format(Block block, extension IFormattableDocument document) {
		
		block.interior[indent]
		block.regionFor.keyword("{").append[newLine]
		block.regionFor.keyword("}").surround[newLine]
		
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (instruction : block.instructions) {
			instruction.format
		}
	}
	
	// TODO: implement for Forward, Left, Right, ProcCall, ProcDeclaration, Block, If, ControlStructure, Repeat, While, Plus, Minus, Mult, Div, Equals, Greater, Lower, Cos, Sin, Tan
}
