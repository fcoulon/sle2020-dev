/**
 * generated by Xtext 2.19.0
 */
package fr.inria.diverse.formatting2;

import com.google.inject.Inject;
import fr.inria.diverse.services.LogoGrammarAccess;
import java.util.Arrays;
import kmLogo.ASM.Block;
import kmLogo.ASM.Instruction;
import kmLogo.ASM.LogoProgram;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class LogoFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private LogoGrammarAccess _logoGrammarAccess;
  
  protected void _format(final LogoProgram logoProgram, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<LogoProgram>interior(logoProgram, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.regionFor(logoProgram).keyword("{"), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.surround(this.textRegionExtensions.regionFor(logoProgram).keyword("}"), _function_2);
    EList<Instruction> _instructions = logoProgram.getInstructions();
    for (final Instruction instruction : _instructions) {
      document.<Instruction>format(instruction);
    }
  }
  
  protected void _format(final Block block, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<Block>interior(block, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.regionFor(block).keyword("{"), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.surround(this.textRegionExtensions.regionFor(block).keyword("}"), _function_2);
    EList<Instruction> _instructions = block.getInstructions();
    for (final Instruction instruction : _instructions) {
      document.<Instruction>format(instruction);
    }
  }
  
  public void format(final Object block, final IFormattableDocument document) {
    if (block instanceof XtextResource) {
      _format((XtextResource)block, document);
      return;
    } else if (block instanceof Block) {
      _format((Block)block, document);
      return;
    } else if (block instanceof LogoProgram) {
      _format((LogoProgram)block, document);
      return;
    } else if (block instanceof EObject) {
      _format((EObject)block, document);
      return;
    } else if (block == null) {
      _format((Void)null, document);
      return;
    } else if (block != null) {
      _format(block, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(block, document).toString());
    }
  }
}
