/*
 * generated by Xtext 2.19.0
 */
package fr.cea.nabla.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class NablaGrammarAccess extends AbstractGrammarElementFinder {
	
	public class NablaModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.NablaModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Assignment cBlocksAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlocksDeclarationBlockParserRuleCall_4_0 = (RuleCall)cBlocksAssignment_4.eContents().get(0);
		private final Assignment cVariablesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Alternatives cVariablesAlternatives_5_0 = (Alternatives)cVariablesAssignment_5.eContents().get(0);
		private final RuleCall cVariablesScalarVarDefinitionParserRuleCall_5_0_0 = (RuleCall)cVariablesAlternatives_5_0.eContents().get(0);
		private final RuleCall cVariablesVarGroupDeclarationParserRuleCall_5_0_1 = (RuleCall)cVariablesAlternatives_5_0.eContents().get(1);
		private final Assignment cJobsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cJobsJobParserRuleCall_6_0 = (RuleCall)cJobsAssignment_6.eContents().get(0);
		
		//NablaModule:
		//	'module' name=QualifiedName ';'
		//	imports+=Import*
		//	blocks+=DeclarationBlock*
		//	variables+=(ScalarVarDefinition | VarGroupDeclaration)*
		//	jobs+=Job*;
		@Override public ParserRule getRule() { return rule; }
		
		//'module' name=QualifiedName ';' imports+=Import* blocks+=DeclarationBlock* variables+=(ScalarVarDefinition |
		//VarGroupDeclaration)* jobs+=Job*
		public Group getGroup() { return cGroup; }
		
		//'module'
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_3_0() { return cImportsImportParserRuleCall_3_0; }
		
		//blocks+=DeclarationBlock*
		public Assignment getBlocksAssignment_4() { return cBlocksAssignment_4; }
		
		//DeclarationBlock
		public RuleCall getBlocksDeclarationBlockParserRuleCall_4_0() { return cBlocksDeclarationBlockParserRuleCall_4_0; }
		
		//variables+=(ScalarVarDefinition | VarGroupDeclaration)*
		public Assignment getVariablesAssignment_5() { return cVariablesAssignment_5; }
		
		//(ScalarVarDefinition | VarGroupDeclaration)
		public Alternatives getVariablesAlternatives_5_0() { return cVariablesAlternatives_5_0; }
		
		//ScalarVarDefinition
		public RuleCall getVariablesScalarVarDefinitionParserRuleCall_5_0_0() { return cVariablesScalarVarDefinitionParserRuleCall_5_0_0; }
		
		//VarGroupDeclaration
		public RuleCall getVariablesVarGroupDeclarationParserRuleCall_5_0_1() { return cVariablesVarGroupDeclarationParserRuleCall_5_0_1; }
		
		//jobs+=Job*
		public Assignment getJobsAssignment_6() { return cJobsAssignment_6; }
		
		//Job
		public RuleCall getJobsJobParserRuleCall_6_0() { return cJobsJobParserRuleCall_6_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Import:
		//	'with' importedNamespace=QualifiedNameWithWildcard ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'with' importedNamespace=QualifiedNameWithWildcard ';'
		public Group getGroup() { return cGroup; }
		
		//'with'
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class DeclarationBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.DeclarationBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cConnectivityDeclarationBlockAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cConnectivitiesKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cConnectivitiesAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cConnectivitiesConnectivityParserRuleCall_0_3_0 = (RuleCall)cConnectivitiesAssignment_0_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFunctionDeclarationBlockAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFunctionsKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cFunctionsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final Alternatives cFunctionsAlternatives_1_3_0 = (Alternatives)cFunctionsAssignment_1_3.eContents().get(0);
		private final RuleCall cFunctionsFunctionParserRuleCall_1_3_0_0 = (RuleCall)cFunctionsAlternatives_1_3_0.eContents().get(0);
		private final RuleCall cFunctionsReductionParserRuleCall_1_3_0_1 = (RuleCall)cFunctionsAlternatives_1_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//DeclarationBlock:
		//	{ConnectivityDeclarationBlock} 'connectivities' '{' connectivities+=Connectivity* '}' | {FunctionDeclarationBlock}
		//	'functions' '{' functions+=(Function | Reduction)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ConnectivityDeclarationBlock} 'connectivities' '{' connectivities+=Connectivity* '}' | {FunctionDeclarationBlock}
		//'functions' '{' functions+=(Function | Reduction)* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ConnectivityDeclarationBlock} 'connectivities' '{' connectivities+=Connectivity* '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//{ConnectivityDeclarationBlock}
		public Action getConnectivityDeclarationBlockAction_0_0() { return cConnectivityDeclarationBlockAction_0_0; }
		
		//'connectivities'
		public Keyword getConnectivitiesKeyword_0_1() { return cConnectivitiesKeyword_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }
		
		//connectivities+=Connectivity*
		public Assignment getConnectivitiesAssignment_0_3() { return cConnectivitiesAssignment_0_3; }
		
		//Connectivity
		public RuleCall getConnectivitiesConnectivityParserRuleCall_0_3_0() { return cConnectivitiesConnectivityParserRuleCall_0_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_4() { return cRightCurlyBracketKeyword_0_4; }
		
		//{FunctionDeclarationBlock} 'functions' '{' functions+=(Function | Reduction)* '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//{FunctionDeclarationBlock}
		public Action getFunctionDeclarationBlockAction_1_0() { return cFunctionDeclarationBlockAction_1_0; }
		
		//'functions'
		public Keyword getFunctionsKeyword_1_1() { return cFunctionsKeyword_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_2() { return cLeftCurlyBracketKeyword_1_2; }
		
		//functions+=(Function | Reduction)*
		public Assignment getFunctionsAssignment_1_3() { return cFunctionsAssignment_1_3; }
		
		//(Function | Reduction)
		public Alternatives getFunctionsAlternatives_1_3_0() { return cFunctionsAlternatives_1_3_0; }
		
		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_1_3_0_0() { return cFunctionsFunctionParserRuleCall_1_3_0_0; }
		
		//Reduction
		public RuleCall getFunctionsReductionParserRuleCall_1_3_0_1() { return cFunctionsReductionParserRuleCall_1_3_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_4() { return cRightCurlyBracketKeyword_1_4; }
	}
	public class JobElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.Job");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cInstructionJobAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cInstructionAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cInstructionInstructionParserRuleCall_0_3_0 = (RuleCall)cInstructionAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cTimeLoopJobAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cForAllKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cIteratorAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cIteratorTimeIteratorParserRuleCall_1_4_0 = (RuleCall)cIteratorAssignment_1_4.eContents().get(0);
		private final Keyword cCommaKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cInitializationAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cInitializationInstructionParserRuleCall_1_6_0 = (RuleCall)cInitializationAssignment_1_6.eContents().get(0);
		private final Keyword cCommaKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Assignment cBodyAssignment_1_8 = (Assignment)cGroup_1.eContents().get(8);
		private final RuleCall cBodyInstructionParserRuleCall_1_8_0 = (RuleCall)cBodyAssignment_1_8.eContents().get(0);
		
		///* JOBS **************************************************/ Job:
		//	{InstructionJob} name=ID ':' instruction=Instruction | {TimeLoopJob} name=ID ':' '\\u2200' iterator=TimeIterator ','
		//	initialization=Instruction ',' body=Instruction;
		@Override public ParserRule getRule() { return rule; }
		
		//{InstructionJob} name=ID ':' instruction=Instruction | {TimeLoopJob} name=ID ':' '\\u2200' iterator=TimeIterator ','
		//initialization=Instruction ',' body=Instruction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{InstructionJob} name=ID ':' instruction=Instruction
		public Group getGroup_0() { return cGroup_0; }
		
		//{InstructionJob}
		public Action getInstructionJobAction_0_0() { return cInstructionJobAction_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }
		
		//':'
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }
		
		//instruction=Instruction
		public Assignment getInstructionAssignment_0_3() { return cInstructionAssignment_0_3; }
		
		//Instruction
		public RuleCall getInstructionInstructionParserRuleCall_0_3_0() { return cInstructionInstructionParserRuleCall_0_3_0; }
		
		//{TimeLoopJob} name=ID ':' '\\u2200' iterator=TimeIterator ',' initialization=Instruction ',' body=Instruction
		public Group getGroup_1() { return cGroup_1; }
		
		//{TimeLoopJob}
		public Action getTimeLoopJobAction_1_0() { return cTimeLoopJobAction_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }
		
		//'\\u2200'
		public Keyword getForAllKeyword_1_3() { return cForAllKeyword_1_3; }
		
		//iterator=TimeIterator
		public Assignment getIteratorAssignment_1_4() { return cIteratorAssignment_1_4; }
		
		//TimeIterator
		public RuleCall getIteratorTimeIteratorParserRuleCall_1_4_0() { return cIteratorTimeIteratorParserRuleCall_1_4_0; }
		
		//','
		public Keyword getCommaKeyword_1_5() { return cCommaKeyword_1_5; }
		
		//initialization=Instruction
		public Assignment getInitializationAssignment_1_6() { return cInitializationAssignment_1_6; }
		
		//Instruction
		public RuleCall getInitializationInstructionParserRuleCall_1_6_0() { return cInitializationInstructionParserRuleCall_1_6_0; }
		
		//','
		public Keyword getCommaKeyword_1_7() { return cCommaKeyword_1_7; }
		
		//body=Instruction
		public Assignment getBodyAssignment_1_8() { return cBodyAssignment_1_8; }
		
		//Instruction
		public RuleCall getBodyInstructionParserRuleCall_1_8_0() { return cBodyInstructionParserRuleCall_1_8_0; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cScalarVarDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVarGroupDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cInstructionBlockAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cInstructionsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cInstructionsInstructionParserRuleCall_2_2_0 = (RuleCall)cInstructionsAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cAffectationAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cVarRefAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVarRefVarRefParserRuleCall_3_1_0 = (RuleCall)cVarRefAssignment_3_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cExpressionAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_3_0 = (RuleCall)cExpressionAssignment_3_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cLoopAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cForAllKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cIteratorAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cIteratorSpaceIteratorParserRuleCall_4_2_0 = (RuleCall)cIteratorAssignment_4_2.eContents().get(0);
		private final Keyword cCommaKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cBodyAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final RuleCall cBodyInstructionParserRuleCall_4_4_0 = (RuleCall)cBodyAssignment_4_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cIfAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cIfKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cConditionAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cConditionExpressionParserRuleCall_5_3_0 = (RuleCall)cConditionAssignment_5_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Assignment cThenAssignment_5_5 = (Assignment)cGroup_5.eContents().get(5);
		private final RuleCall cThenInstructionParserRuleCall_5_5_0 = (RuleCall)cThenAssignment_5_5.eContents().get(0);
		private final Group cGroup_5_6 = (Group)cGroup_5.eContents().get(6);
		private final Keyword cElseKeyword_5_6_0 = (Keyword)cGroup_5_6.eContents().get(0);
		private final Assignment cElseAssignment_5_6_1 = (Assignment)cGroup_5_6.eContents().get(1);
		private final RuleCall cElseInstructionParserRuleCall_5_6_1_0 = (RuleCall)cElseAssignment_5_6_1.eContents().get(0);
		
		///* INSTRUCTIONS ******************************************/ Instruction:
		//	ScalarVarDefinition | VarGroupDeclaration | {InstructionBlock} '{' instructions+=Instruction+ '}' | {Affectation}
		//	varRef=VarRef '=' expression=Expression ';' | {Loop} '\\u2200' iterator=SpaceIterator ',' body=Instruction | {If} 'if'
		//	'(' condition=Expression ')' then=Instruction (=> 'else' else=Instruction)?;
		@Override public ParserRule getRule() { return rule; }
		
		//ScalarVarDefinition | VarGroupDeclaration | {InstructionBlock} '{' instructions+=Instruction+ '}' | {Affectation}
		//varRef=VarRef '=' expression=Expression ';' | {Loop} '\\u2200' iterator=SpaceIterator ',' body=Instruction | {If} 'if'
		//'(' condition=Expression ')' then=Instruction (=> 'else' else=Instruction)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ScalarVarDefinition
		public RuleCall getScalarVarDefinitionParserRuleCall_0() { return cScalarVarDefinitionParserRuleCall_0; }
		
		//VarGroupDeclaration
		public RuleCall getVarGroupDeclarationParserRuleCall_1() { return cVarGroupDeclarationParserRuleCall_1; }
		
		//{InstructionBlock} '{' instructions+=Instruction+ '}'
		public Group getGroup_2() { return cGroup_2; }
		
		//{InstructionBlock}
		public Action getInstructionBlockAction_2_0() { return cInstructionBlockAction_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }
		
		//instructions+=Instruction+
		public Assignment getInstructionsAssignment_2_2() { return cInstructionsAssignment_2_2; }
		
		//Instruction
		public RuleCall getInstructionsInstructionParserRuleCall_2_2_0() { return cInstructionsInstructionParserRuleCall_2_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
		
		//{Affectation} varRef=VarRef '=' expression=Expression ';'
		public Group getGroup_3() { return cGroup_3; }
		
		//{Affectation}
		public Action getAffectationAction_3_0() { return cAffectationAction_3_0; }
		
		//varRef=VarRef
		public Assignment getVarRefAssignment_3_1() { return cVarRefAssignment_3_1; }
		
		//VarRef
		public RuleCall getVarRefVarRefParserRuleCall_3_1_0() { return cVarRefVarRefParserRuleCall_3_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_2() { return cEqualsSignKeyword_3_2; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3_3() { return cExpressionAssignment_3_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_3_0() { return cExpressionExpressionParserRuleCall_3_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_4() { return cSemicolonKeyword_3_4; }
		
		//{Loop} '\\u2200' iterator=SpaceIterator ',' body=Instruction
		public Group getGroup_4() { return cGroup_4; }
		
		//{Loop}
		public Action getLoopAction_4_0() { return cLoopAction_4_0; }
		
		//'\\u2200'
		public Keyword getForAllKeyword_4_1() { return cForAllKeyword_4_1; }
		
		//iterator=SpaceIterator
		public Assignment getIteratorAssignment_4_2() { return cIteratorAssignment_4_2; }
		
		//SpaceIterator
		public RuleCall getIteratorSpaceIteratorParserRuleCall_4_2_0() { return cIteratorSpaceIteratorParserRuleCall_4_2_0; }
		
		//','
		public Keyword getCommaKeyword_4_3() { return cCommaKeyword_4_3; }
		
		//body=Instruction
		public Assignment getBodyAssignment_4_4() { return cBodyAssignment_4_4; }
		
		//Instruction
		public RuleCall getBodyInstructionParserRuleCall_4_4_0() { return cBodyInstructionParserRuleCall_4_4_0; }
		
		//{If} 'if' '(' condition=Expression ')' then=Instruction (=> 'else' else=Instruction)?
		public Group getGroup_5() { return cGroup_5; }
		
		//{If}
		public Action getIfAction_5_0() { return cIfAction_5_0; }
		
		//'if'
		public Keyword getIfKeyword_5_1() { return cIfKeyword_5_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_2() { return cLeftParenthesisKeyword_5_2; }
		
		//condition=Expression
		public Assignment getConditionAssignment_5_3() { return cConditionAssignment_5_3; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_5_3_0() { return cConditionExpressionParserRuleCall_5_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }
		
		//then=Instruction
		public Assignment getThenAssignment_5_5() { return cThenAssignment_5_5; }
		
		//Instruction
		public RuleCall getThenInstructionParserRuleCall_5_5_0() { return cThenInstructionParserRuleCall_5_5_0; }
		
		//(=> 'else' else=Instruction)?
		public Group getGroup_5_6() { return cGroup_5_6; }
		
		//=> 'else'
		public Keyword getElseKeyword_5_6_0() { return cElseKeyword_5_6_0; }
		
		//else=Instruction
		public Assignment getElseAssignment_5_6_1() { return cElseAssignment_5_6_1; }
		
		//Instruction
		public RuleCall getElseInstructionParserRuleCall_5_6_1_0() { return cElseInstructionParserRuleCall_5_6_1_0; }
	}
	public class TimeIteratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.TimeIterator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cElementOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDoubleStruckCapitalNKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		///* ITERATEURS ********************************************/ TimeIterator:
		//	name=ID '\\u2208' '\\u2115';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '\\u2208' '\\u2115'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'\\u2208'
		public Keyword getElementOfKeyword_1() { return cElementOfKeyword_1; }
		
		//'\\u2115'
		public Keyword getDoubleStruckCapitalNKeyword_2() { return cDoubleStruckCapitalNKeyword_2; }
	}
	public class SpaceIteratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.SpaceIterator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cElementOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRangeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRangeSpaceIteratorRangeParserRuleCall_2_0 = (RuleCall)cRangeAssignment_2.eContents().get(0);
		
		//SpaceIterator:
		//	name=ID '\\u2208' range=SpaceIteratorRange;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '\\u2208' range=SpaceIteratorRange
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'\\u2208'
		public Keyword getElementOfKeyword_1() { return cElementOfKeyword_1; }
		
		//range=SpaceIteratorRange
		public Assignment getRangeAssignment_2() { return cRangeAssignment_2; }
		
		//SpaceIteratorRange
		public RuleCall getRangeSpaceIteratorRangeParserRuleCall_2_0() { return cRangeSpaceIteratorRangeParserRuleCall_2_0; }
	}
	public class SpaceIteratorRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.SpaceIteratorRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConnectivityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cConnectivityConnectivityCrossReference_0_0 = (CrossReference)cConnectivityAssignment_0.eContents().get(0);
		private final RuleCall cConnectivityConnectivityIDTerminalRuleCall_0_0_1 = (RuleCall)cConnectivityConnectivityCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsSpaceIteratorRefParserRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgsSpaceIteratorRefParserRuleCall_2_1_1_0 = (RuleCall)cArgsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SpaceIteratorRange:
		//	connectivity=[Connectivity] '(' (args+=SpaceIteratorRef (',' args+=SpaceIteratorRef)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//connectivity=[Connectivity] '(' (args+=SpaceIteratorRef (',' args+=SpaceIteratorRef)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//connectivity=[Connectivity]
		public Assignment getConnectivityAssignment_0() { return cConnectivityAssignment_0; }
		
		//[Connectivity]
		public CrossReference getConnectivityConnectivityCrossReference_0_0() { return cConnectivityConnectivityCrossReference_0_0; }
		
		//ID
		public RuleCall getConnectivityConnectivityIDTerminalRuleCall_0_0_1() { return cConnectivityConnectivityIDTerminalRuleCall_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(args+=SpaceIteratorRef (',' args+=SpaceIteratorRef)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//args+=SpaceIteratorRef
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }
		
		//SpaceIteratorRef
		public RuleCall getArgsSpaceIteratorRefParserRuleCall_2_0_0() { return cArgsSpaceIteratorRefParserRuleCall_2_0_0; }
		
		//(',' args+=SpaceIteratorRef)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//args+=SpaceIteratorRef
		public Assignment getArgsAssignment_2_1_1() { return cArgsAssignment_2_1_1; }
		
		//SpaceIteratorRef
		public RuleCall getArgsSpaceIteratorRefParserRuleCall_2_1_1_0() { return cArgsSpaceIteratorRefParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SpaceIteratorRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.SpaceIteratorRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Assignment cPrevAssignment_0_0_0 = (Assignment)cAlternatives_0_0.eContents().get(0);
		private final Keyword cPrevBlackLeftPointingPointerKeyword_0_0_0_0 = (Keyword)cPrevAssignment_0_0_0.eContents().get(0);
		private final Assignment cNextAssignment_0_0_1 = (Assignment)cAlternatives_0_0.eContents().get(1);
		private final Keyword cNextBlackRightPointingPointerKeyword_0_0_1_0 = (Keyword)cNextAssignment_0_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cIteratorAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cIteratorSpaceIteratorCrossReference_0_2_0 = (CrossReference)cIteratorAssignment_0_2.eContents().get(0);
		private final RuleCall cIteratorSpaceIteratorIDTerminalRuleCall_0_2_0_1 = (RuleCall)cIteratorSpaceIteratorCrossReference_0_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cIteratorAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cIteratorSpaceIteratorCrossReference_1_0 = (CrossReference)cIteratorAssignment_1.eContents().get(0);
		private final RuleCall cIteratorSpaceIteratorIDTerminalRuleCall_1_0_1 = (RuleCall)cIteratorSpaceIteratorCrossReference_1_0.eContents().get(1);
		
		//SpaceIteratorRef:
		//	(prev?='\\u25C4' | next?='\\u25BA') '(' iterator=[SpaceIterator] ')' | iterator=[SpaceIterator];
		@Override public ParserRule getRule() { return rule; }
		
		//(prev?='\\u25C4' | next?='\\u25BA') '(' iterator=[SpaceIterator] ')' | iterator=[SpaceIterator]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(prev?='\\u25C4' | next?='\\u25BA') '(' iterator=[SpaceIterator] ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//(prev?='\\u25C4' | next?='\\u25BA')
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//prev?='\\u25C4'
		public Assignment getPrevAssignment_0_0_0() { return cPrevAssignment_0_0_0; }
		
		//'\\u25C4'
		public Keyword getPrevBlackLeftPointingPointerKeyword_0_0_0_0() { return cPrevBlackLeftPointingPointerKeyword_0_0_0_0; }
		
		//next?='\\u25BA'
		public Assignment getNextAssignment_0_0_1() { return cNextAssignment_0_0_1; }
		
		//'\\u25BA'
		public Keyword getNextBlackRightPointingPointerKeyword_0_0_1_0() { return cNextBlackRightPointingPointerKeyword_0_0_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//iterator=[SpaceIterator]
		public Assignment getIteratorAssignment_0_2() { return cIteratorAssignment_0_2; }
		
		//[SpaceIterator]
		public CrossReference getIteratorSpaceIteratorCrossReference_0_2_0() { return cIteratorSpaceIteratorCrossReference_0_2_0; }
		
		//ID
		public RuleCall getIteratorSpaceIteratorIDTerminalRuleCall_0_2_0_1() { return cIteratorSpaceIteratorIDTerminalRuleCall_0_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//iterator=[SpaceIterator]
		public Assignment getIteratorAssignment_1() { return cIteratorAssignment_1; }
		
		//[SpaceIterator]
		public CrossReference getIteratorSpaceIteratorCrossReference_1_0() { return cIteratorSpaceIteratorCrossReference_1_0; }
		
		//ID
		public RuleCall getIteratorSpaceIteratorIDTerminalRuleCall_1_0_1() { return cIteratorSpaceIteratorIDTerminalRuleCall_1_0_1; }
	}
	public class ScalarVarDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.ScalarVarDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cConstConstKeyword_0_0 = (Keyword)cConstAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeBasicTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableScalarVarParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDefaultValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDefaultValueExpressionParserRuleCall_4_0 = (RuleCall)cDefaultValueAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///* VARIABLES ********************************************/ ScalarVarDefinition:
		//	const?='const'? type=BasicType variable=ScalarVar '=' defaultValue=Expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//const?='const'? type=BasicType variable=ScalarVar '=' defaultValue=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//const?='const'?
		public Assignment getConstAssignment_0() { return cConstAssignment_0; }
		
		//'const'
		public Keyword getConstConstKeyword_0_0() { return cConstConstKeyword_0_0; }
		
		//type=BasicType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//BasicType
		public RuleCall getTypeBasicTypeEnumRuleCall_1_0() { return cTypeBasicTypeEnumRuleCall_1_0; }
		
		//variable=ScalarVar
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }
		
		//ScalarVar
		public RuleCall getVariableScalarVarParserRuleCall_2_0() { return cVariableScalarVarParserRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//defaultValue=Expression
		public Assignment getDefaultValueAssignment_4() { return cDefaultValueAssignment_4; }
		
		//Expression
		public RuleCall getDefaultValueExpressionParserRuleCall_4_0() { return cDefaultValueExpressionParserRuleCall_4_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class VarGroupDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.VarGroupDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeBasicTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesVarParserRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariablesVarParserRuleCall_2_1_0 = (RuleCall)cVariablesAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//VarGroupDeclaration:
		//	type=BasicType variables+=Var (',' variables+=Var)* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//type=BasicType variables+=Var (',' variables+=Var)* ';'
		public Group getGroup() { return cGroup; }
		
		//type=BasicType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//BasicType
		public RuleCall getTypeBasicTypeEnumRuleCall_0_0() { return cTypeBasicTypeEnumRuleCall_0_0; }
		
		//variables+=Var
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }
		
		//Var
		public RuleCall getVariablesVarParserRuleCall_1_0() { return cVariablesVarParserRuleCall_1_0; }
		
		//(',' variables+=Var)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//variables+=Var
		public Assignment getVariablesAssignment_2_1() { return cVariablesAssignment_2_1; }
		
		//Var
		public RuleCall getVariablesVarParserRuleCall_2_1_0() { return cVariablesVarParserRuleCall_2_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.Var");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cScalarVarParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayVarParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Var:
		//	ScalarVar | ArrayVar;
		@Override public ParserRule getRule() { return rule; }
		
		//ScalarVar | ArrayVar
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ScalarVar
		public RuleCall getScalarVarParserRuleCall_0() { return cScalarVarParserRuleCall_0; }
		
		//ArrayVar
		public RuleCall getArrayVarParserRuleCall_1() { return cArrayVarParserRuleCall_1; }
	}
	public class ScalarVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.ScalarVar");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ScalarVar:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ArrayVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.ArrayVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDimensionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDimensionsConnectivityCrossReference_2_0 = (CrossReference)cDimensionsAssignment_2.eContents().get(0);
		private final RuleCall cDimensionsConnectivityIDTerminalRuleCall_2_0_1 = (RuleCall)cDimensionsConnectivityCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDimensionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cDimensionsConnectivityCrossReference_3_1_0 = (CrossReference)cDimensionsAssignment_3_1.eContents().get(0);
		private final RuleCall cDimensionsConnectivityIDTerminalRuleCall_3_1_0_1 = (RuleCall)cDimensionsConnectivityCrossReference_3_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ArrayVar:
		//	name=ID '[' dimensions+=[Connectivity] (',' dimensions+=[Connectivity])* ']';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '[' dimensions+=[Connectivity] (',' dimensions+=[Connectivity])* ']'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//dimensions+=[Connectivity]
		public Assignment getDimensionsAssignment_2() { return cDimensionsAssignment_2; }
		
		//[Connectivity]
		public CrossReference getDimensionsConnectivityCrossReference_2_0() { return cDimensionsConnectivityCrossReference_2_0; }
		
		//ID
		public RuleCall getDimensionsConnectivityIDTerminalRuleCall_2_0_1() { return cDimensionsConnectivityIDTerminalRuleCall_2_0_1; }
		
		//(',' dimensions+=[Connectivity])*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//dimensions+=[Connectivity]
		public Assignment getDimensionsAssignment_3_1() { return cDimensionsAssignment_3_1; }
		
		//[Connectivity]
		public CrossReference getDimensionsConnectivityCrossReference_3_1_0() { return cDimensionsConnectivityCrossReference_3_1_0; }
		
		//ID
		public RuleCall getDimensionsConnectivityIDTerminalRuleCall_3_1_0_1() { return cDimensionsConnectivityIDTerminalRuleCall_3_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class ConnectivityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.Connectivity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cInTypesAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cInTypesItemTypeEnumRuleCall_3_0_0_0 = (RuleCall)cInTypesAssignment_3_0_0.eContents().get(0);
		private final Group cGroup_3_0_1 = (Group)cGroup_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_3_0_1_0 = (Keyword)cGroup_3_0_1.eContents().get(0);
		private final Assignment cInTypesAssignment_3_0_1_1 = (Assignment)cGroup_3_0_1.eContents().get(1);
		private final RuleCall cInTypesItemTypeEnumRuleCall_3_0_1_1_0 = (RuleCall)cInTypesAssignment_3_0_1_1.eContents().get(0);
		private final Keyword cEmptySetKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightwardsArrowKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cReturnTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cReturnTypeItemArgTypeParserRuleCall_6_0 = (RuleCall)cReturnTypeAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		///* CONNECTIVITES *****************************************/ Connectivity:
		//	name=ID ':' '(' (inTypes+=ItemType (',' inTypes+=ItemType)* | '\\u2205') ')' '\\u2192' returnType=ItemArgType ';';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' '(' (inTypes+=ItemType (',' inTypes+=ItemType)* | '\\u2205') ')' '\\u2192' returnType=ItemArgType ';'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(inTypes+=ItemType (',' inTypes+=ItemType)* | '\\u2205')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//inTypes+=ItemType (',' inTypes+=ItemType)*
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//inTypes+=ItemType
		public Assignment getInTypesAssignment_3_0_0() { return cInTypesAssignment_3_0_0; }
		
		//ItemType
		public RuleCall getInTypesItemTypeEnumRuleCall_3_0_0_0() { return cInTypesItemTypeEnumRuleCall_3_0_0_0; }
		
		//(',' inTypes+=ItemType)*
		public Group getGroup_3_0_1() { return cGroup_3_0_1; }
		
		//','
		public Keyword getCommaKeyword_3_0_1_0() { return cCommaKeyword_3_0_1_0; }
		
		//inTypes+=ItemType
		public Assignment getInTypesAssignment_3_0_1_1() { return cInTypesAssignment_3_0_1_1; }
		
		//ItemType
		public RuleCall getInTypesItemTypeEnumRuleCall_3_0_1_1_0() { return cInTypesItemTypeEnumRuleCall_3_0_1_1_0; }
		
		//'\\u2205'
		public Keyword getEmptySetKeyword_3_1() { return cEmptySetKeyword_3_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'\\u2192'
		public Keyword getRightwardsArrowKeyword_5() { return cRightwardsArrowKeyword_5; }
		
		//returnType=ItemArgType
		public Assignment getReturnTypeAssignment_6() { return cReturnTypeAssignment_6; }
		
		//ItemArgType
		public RuleCall getReturnTypeItemArgTypeParserRuleCall_6_0() { return cReturnTypeItemArgTypeParserRuleCall_6_0; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class ItemArgTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.ItemArgType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cMultipleAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cMultipleLeftCurlyBracketKeyword_0_0_0 = (Keyword)cMultipleAssignment_0_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeItemTypeEnumRuleCall_0_1_0 = (RuleCall)cTypeAssignment_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypeItemTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//ItemArgType:
		//	multiple?='{' type=ItemType '}' | type=ItemType;
		@Override public ParserRule getRule() { return rule; }
		
		//multiple?='{' type=ItemType '}' | type=ItemType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//multiple?='{' type=ItemType '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//multiple?='{'
		public Assignment getMultipleAssignment_0_0() { return cMultipleAssignment_0_0; }
		
		//'{'
		public Keyword getMultipleLeftCurlyBracketKeyword_0_0_0() { return cMultipleLeftCurlyBracketKeyword_0_0_0; }
		
		//type=ItemType
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }
		
		//ItemType
		public RuleCall getTypeItemTypeEnumRuleCall_0_1_0() { return cTypeItemTypeEnumRuleCall_0_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_2() { return cRightCurlyBracketKeyword_0_2; }
		
		//type=ItemType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//ItemType
		public RuleCall getTypeItemTypeEnumRuleCall_1_0() { return cTypeItemTypeEnumRuleCall_1_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgGroupsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgGroupsFunctionArgParserRuleCall_3_0 = (RuleCall)cArgGroupsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cArgGroupsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cArgGroupsFunctionArgParserRuleCall_4_1_0 = (RuleCall)cArgGroupsAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///* FONCTIONS / REDUCTIONS ********************************/ Function Callable:
		//	{Function} name=ID ':' argGroups+=FunctionArg (',' argGroups+=FunctionArg)* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Function} name=ID ':' argGroups+=FunctionArg (',' argGroups+=FunctionArg)* ';'
		public Group getGroup() { return cGroup; }
		
		//{Function}
		public Action getFunctionAction_0() { return cFunctionAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//argGroups+=FunctionArg
		public Assignment getArgGroupsAssignment_3() { return cArgGroupsAssignment_3; }
		
		//FunctionArg
		public RuleCall getArgGroupsFunctionArgParserRuleCall_3_0() { return cArgGroupsFunctionArgParserRuleCall_3_0; }
		
		//(',' argGroups+=FunctionArg)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//argGroups+=FunctionArg
		public Assignment getArgGroupsAssignment_4_1() { return cArgGroupsAssignment_4_1; }
		
		//FunctionArg
		public RuleCall getArgGroupsFunctionArgParserRuleCall_4_1_0() { return cArgGroupsFunctionArgParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class FunctionArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.FunctionArg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cInTypesAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cInTypesBasicTypeEnumRuleCall_1_0_0_0 = (RuleCall)cInTypesAssignment_1_0_0.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_1_0 = (Keyword)cGroup_1_0_1.eContents().get(0);
		private final Assignment cInTypesAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final RuleCall cInTypesBasicTypeEnumRuleCall_1_0_1_1_0 = (RuleCall)cInTypesAssignment_1_0_1_1.eContents().get(0);
		private final Keyword cEmptySetKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightwardsArrowKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cReturnTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cReturnTypeBasicTypeEnumRuleCall_4_0 = (RuleCall)cReturnTypeAssignment_4.eContents().get(0);
		
		//FunctionArg:
		//	'(' (inTypes+=BasicType (',' inTypes+=BasicType)* | '\\u2205') ')' '\\u2192' returnType=BasicType;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' (inTypes+=BasicType (',' inTypes+=BasicType)* | '\\u2205') ')' '\\u2192' returnType=BasicType
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(inTypes+=BasicType (',' inTypes+=BasicType)* | '\\u2205')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//inTypes+=BasicType (',' inTypes+=BasicType)*
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//inTypes+=BasicType
		public Assignment getInTypesAssignment_1_0_0() { return cInTypesAssignment_1_0_0; }
		
		//BasicType
		public RuleCall getInTypesBasicTypeEnumRuleCall_1_0_0_0() { return cInTypesBasicTypeEnumRuleCall_1_0_0_0; }
		
		//(',' inTypes+=BasicType)*
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//','
		public Keyword getCommaKeyword_1_0_1_0() { return cCommaKeyword_1_0_1_0; }
		
		//inTypes+=BasicType
		public Assignment getInTypesAssignment_1_0_1_1() { return cInTypesAssignment_1_0_1_1; }
		
		//BasicType
		public RuleCall getInTypesBasicTypeEnumRuleCall_1_0_1_1_0() { return cInTypesBasicTypeEnumRuleCall_1_0_1_1_0; }
		
		//'\\u2205'
		public Keyword getEmptySetKeyword_1_1() { return cEmptySetKeyword_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
		
		//'\\u2192'
		public Keyword getRightwardsArrowKeyword_3() { return cRightwardsArrowKeyword_3; }
		
		//returnType=BasicType
		public Assignment getReturnTypeAssignment_4() { return cReturnTypeAssignment_4; }
		
		//BasicType
		public RuleCall getReturnTypeBasicTypeEnumRuleCall_4_0() { return cReturnTypeBasicTypeEnumRuleCall_4_0; }
	}
	public class ReductionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.Reduction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReductionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgGroupsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgGroupsReductionArgParserRuleCall_3_0 = (RuleCall)cArgGroupsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cArgGroupsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cArgGroupsReductionArgParserRuleCall_4_1_0 = (RuleCall)cArgGroupsAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Reduction Callable:
		//	{Reduction} name=ID ':' argGroups+=ReductionArg (',' argGroups+=ReductionArg)* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Reduction} name=ID ':' argGroups+=ReductionArg (',' argGroups+=ReductionArg)* ';'
		public Group getGroup() { return cGroup; }
		
		//{Reduction}
		public Action getReductionAction_0() { return cReductionAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//argGroups+=ReductionArg
		public Assignment getArgGroupsAssignment_3() { return cArgGroupsAssignment_3; }
		
		//ReductionArg
		public RuleCall getArgGroupsReductionArgParserRuleCall_3_0() { return cArgGroupsReductionArgParserRuleCall_3_0; }
		
		//(',' argGroups+=ReductionArg)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//argGroups+=ReductionArg
		public Assignment getArgGroupsAssignment_4_1() { return cArgGroupsAssignment_4_1; }
		
		//ReductionArg
		public RuleCall getArgGroupsReductionArgParserRuleCall_4_1_0() { return cArgGroupsReductionArgParserRuleCall_4_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ReductionArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.ReductionArg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSeedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSeedExpressionParserRuleCall_1_0 = (RuleCall)cSeedAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCollectionTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCollectionTypeBasicTypeEnumRuleCall_3_0 = (RuleCall)cCollectionTypeAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightwardsArrowKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cReturnTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cReturnTypeBasicTypeEnumRuleCall_6_0 = (RuleCall)cReturnTypeAssignment_6.eContents().get(0);
		
		//ReductionArg:
		//	'(' seed=Expression ',' collectionType=BasicType ')' '\\u2192' returnType=BasicType;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' seed=Expression ',' collectionType=BasicType ')' '\\u2192' returnType=BasicType
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//seed=Expression
		public Assignment getSeedAssignment_1() { return cSeedAssignment_1; }
		
		//Expression
		public RuleCall getSeedExpressionParserRuleCall_1_0() { return cSeedExpressionParserRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//collectionType=BasicType
		public Assignment getCollectionTypeAssignment_3() { return cCollectionTypeAssignment_3; }
		
		//BasicType
		public RuleCall getCollectionTypeBasicTypeEnumRuleCall_3_0() { return cCollectionTypeBasicTypeEnumRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'\\u2192'
		public Keyword getRightwardsArrowKeyword_5() { return cRightwardsArrowKeyword_5; }
		
		//returnType=BasicType
		public Assignment getReturnTypeAssignment_6() { return cReturnTypeAssignment_6; }
		
		//BasicType
		public RuleCall getReturnTypeBasicTypeEnumRuleCall_6_0() { return cReturnTypeBasicTypeEnumRuleCall_6_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.Expression");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///* EXPRESSIONS ******************************************/ Expression:
		//	Or;
		@Override public ParserRule getRule() { return rule; }
		
		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpVerticalLineVerticalLineKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or Expression:
		//	And ({Or.left=current} op='||' right=And)*;
		@Override public ParserRule getRule() { return rule; }
		
		//// on garde l'attribut op pour la validation
		//And ({Or.left=current} op='||' right=And)*
		public Group getGroup() { return cGroup; }
		
		//// on garde l'attribut op pour la validation
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({Or.left=current} op='||' right=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//op='||'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'||'
		public Keyword getOpVerticalLineVerticalLineKeyword_1_1_0() { return cOpVerticalLineVerticalLineKeyword_1_1_0; }
		
		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpAmpersandAmpersandKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And Expression:
		//	Equality ({And.left=current} op='&&' right=Equality)*;
		@Override public ParserRule getRule() { return rule; }
		
		//// on garde l'attribut op pour la validation
		//Equality ({And.left=current} op='&&' right=Equality)*
		public Group getGroup() { return cGroup; }
		
		//// on garde l'attribut op pour la validation
		//Equality
		public RuleCall getEqualityParserRuleCall_0() { return cEqualityParserRuleCall_0; }
		
		//({And.left=current} op='&&' right=Equality)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//op='&&'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//'&&'
		public Keyword getOpAmpersandAmpersandKeyword_1_1_0() { return cOpAmpersandAmpersandKeyword_1_1_0; }
		
		//right=Equality
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Equality
		public RuleCall getRightEqualityParserRuleCall_1_2_0() { return cRightEqualityParserRuleCall_1_2_0; }
	}
	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Equality Expression:
		//	Comparison ({Equality.left=current} op=('==' | '!=') right=Comparison)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison ({Equality.left=current} op=('==' | '!=') right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//({Equality.left=current} op=('==' | '!=') right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equality.left=current}
		public Action getEqualityLeftAction_1_0() { return cEqualityLeftAction_1_0; }
		
		//op=('==' | '!=')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('==' | '!=')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'=='
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }
		
		//'!='
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusOrMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPlusOrMinusParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison Expression:
		//	PlusOrMinus ({Comparison.left=current} op=('>=' | '<=' | '>' | '<') right=PlusOrMinus)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PlusOrMinus ({Comparison.left=current} op=('>=' | '<=' | '>' | '<') right=PlusOrMinus)*
		public Group getGroup() { return cGroup; }
		
		//PlusOrMinus
		public RuleCall getPlusOrMinusParserRuleCall_0() { return cPlusOrMinusParserRuleCall_0; }
		
		//({Comparison.left=current} op=('>=' | '<=' | '>' | '<') right=PlusOrMinus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }
		
		//op=('>=' | '<=' | '>' | '<')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('>=' | '<=' | '>' | '<')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'>='
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_0() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_0; }
		
		//'<='
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_1_1_0_2() { return cOpGreaterThanSignKeyword_1_1_0_2; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_1_1_0_3() { return cOpLessThanSignKeyword_1_1_0_3; }
		
		//right=PlusOrMinus
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PlusOrMinus
		public RuleCall getRightPlusOrMinusParserRuleCall_1_2_0() { return cRightPlusOrMinusParserRuleCall_1_2_0; }
	}
	public class PlusOrMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.PlusOrMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulOrDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpPlusSignKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1_1 = (Assignment)cGroup_1_0_1.eContents().get(1);
		private final Keyword cOpHyphenMinusKeyword_1_0_1_1_0 = (Keyword)cOpAssignment_1_0_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMulOrDivParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusOrMinus Expression:
		//	MulOrDiv (({Plus.left=current} op='+' | {Minus.left=current} op='-') right=MulOrDiv)*;
		@Override public ParserRule getRule() { return rule; }
		
		//// on garde l'attribut op pour la validation
		//MulOrDiv (({Plus.left=current} op='+' | {Minus.left=current} op='-') right=MulOrDiv)*
		public Group getGroup() { return cGroup; }
		
		//// on garde l'attribut op pour la validation
		//MulOrDiv
		public RuleCall getMulOrDivParserRuleCall_0() { return cMulOrDivParserRuleCall_0; }
		
		//(({Plus.left=current} op='+' | {Minus.left=current} op='-') right=MulOrDiv)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Plus.left=current} op='+' | {Minus.left=current} op='-')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} op='+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//op='+'
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }
		
		//'+'
		public Keyword getOpPlusSignKeyword_1_0_0_1_0() { return cOpPlusSignKeyword_1_0_0_1_0; }
		
		//{Minus.left=current} op='-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//op='-'
		public Assignment getOpAssignment_1_0_1_1() { return cOpAssignment_1_0_1_1; }
		
		//'-'
		public Keyword getOpHyphenMinusKeyword_1_0_1_1_0() { return cOpHyphenMinusKeyword_1_0_1_1_0; }
		
		//right=MulOrDiv
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MulOrDiv
		public RuleCall getRightMulOrDivParserRuleCall_1_1_0() { return cRightMulOrDivParserRuleCall_1_1_0; }
	}
	public class MulOrDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.MulOrDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMulOrDivLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MulOrDiv Expression:
		//	Primary ({MulOrDiv.left=current} op=('*' | '/') right=Primary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({MulOrDiv.left=current} op=('*' | '/') right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({MulOrDiv.left=current} op=('*' | '/') right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MulOrDiv.left=current}
		public Action getMulOrDivLeftAction_1_0() { return cMulOrDivLeftAction_1_0; }
		
		//op=('*' | '/')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('*' | '/')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cParenthesisAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnaryMinusAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cNotAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExpressionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_2_2_0 = (RuleCall)cExpressionAssignment_2_2.eContents().get(0);
		private final RuleCall cAtomicParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Primary Expression:
		//	{Parenthesis} '(' expression=Expression ')' | {UnaryMinus} '-' expression=Primary | {Not} '!' expression=Primary |
		//	Atomic;
		@Override public ParserRule getRule() { return rule; }
		
		//{Parenthesis} '(' expression=Expression ')' | {UnaryMinus} '-' expression=Primary | {Not} '!' expression=Primary |
		//Atomic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Parenthesis} '(' expression=Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Parenthesis}
		public Action getParenthesisAction_0_0() { return cParenthesisAction_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_2_0() { return cExpressionExpressionParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//{UnaryMinus} '-' expression=Primary
		public Group getGroup_1() { return cGroup_1; }
		
		//{UnaryMinus}
		public Action getUnaryMinusAction_1_0() { return cUnaryMinusAction_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
		
		//expression=Primary
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_1_2_0() { return cExpressionPrimaryParserRuleCall_1_2_0; }
		
		//{Not} '!' expression=Primary
		public Group getGroup_2() { return cGroup_2; }
		
		//{Not}
		public Action getNotAction_2_0() { return cNotAction_2_0; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_2_1() { return cExclamationMarkKeyword_2_1; }
		
		//expression=Primary
		public Assignment getExpressionAssignment_2_2() { return cExpressionAssignment_2_2; }
		
		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_2_2_0() { return cExpressionPrimaryParserRuleCall_2_2_0; }
		
		//Atomic
		public RuleCall getAtomicParserRuleCall_3() { return cAtomicParserRuleCall_3; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cRealConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueREALTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final RuleCall cReal2ConstantParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cReal3ConstantParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cBoolConstantAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Assignment cValueAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_4_1_0_0 = (Keyword)cValueAssignment_4_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_4_1_1 = (Keyword)cAlternatives_4_1.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cReal2x2ConstantAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cXAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cXReal2ConstantParserRuleCall_5_2_0 = (RuleCall)cXAssignment_5_2.eContents().get(0);
		private final Keyword cCommaKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Assignment cYAssignment_5_4 = (Assignment)cGroup_5.eContents().get(4);
		private final RuleCall cYReal2ConstantParserRuleCall_5_4_0 = (RuleCall)cYAssignment_5_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_5 = (Keyword)cGroup_5.eContents().get(5);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cReal3x3ConstantAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cXAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cXReal3ConstantParserRuleCall_6_2_0 = (RuleCall)cXAssignment_6_2.eContents().get(0);
		private final Keyword cCommaKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Assignment cYAssignment_6_4 = (Assignment)cGroup_6.eContents().get(4);
		private final RuleCall cYReal3ConstantParserRuleCall_6_4_0 = (RuleCall)cYAssignment_6_4.eContents().get(0);
		private final Keyword cCommaKeyword_6_5 = (Keyword)cGroup_6.eContents().get(5);
		private final Assignment cZAssignment_6_6 = (Assignment)cGroup_6.eContents().get(6);
		private final RuleCall cZReal3ConstantParserRuleCall_6_6_0 = (RuleCall)cZAssignment_6_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_7 = (Keyword)cGroup_6.eContents().get(7);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cRealXCompactConstantAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cTypeAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cTypeBasicTypeEnumRuleCall_7_1_0 = (RuleCall)cTypeAssignment_7_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cValueAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cValueREALTerminalRuleCall_7_3_0 = (RuleCall)cValueAssignment_7_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cMinConstantAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Assignment cTypeAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cTypeBasicTypeEnumRuleCall_8_1_0 = (RuleCall)cTypeAssignment_8_1.eContents().get(0);
		private final Keyword cMinValueKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cMaxConstantAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Assignment cTypeAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cTypeBasicTypeEnumRuleCall_9_1_0 = (RuleCall)cTypeAssignment_9_1.eContents().get(0);
		private final Keyword cMaxValueKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cFunctionCallAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Assignment cFunctionAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final CrossReference cFunctionFunctionCrossReference_10_1_0 = (CrossReference)cFunctionAssignment_10_1.eContents().get(0);
		private final RuleCall cFunctionFunctionQualifiedNameParserRuleCall_10_1_0_1 = (RuleCall)cFunctionFunctionCrossReference_10_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Group cGroup_10_3 = (Group)cGroup_10.eContents().get(3);
		private final Assignment cArgsAssignment_10_3_0 = (Assignment)cGroup_10_3.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_10_3_0_0 = (RuleCall)cArgsAssignment_10_3_0.eContents().get(0);
		private final Group cGroup_10_3_1 = (Group)cGroup_10_3.eContents().get(1);
		private final Keyword cCommaKeyword_10_3_1_0 = (Keyword)cGroup_10_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_10_3_1_1 = (Assignment)cGroup_10_3_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_10_3_1_1_0 = (RuleCall)cArgsAssignment_10_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10_4 = (Keyword)cGroup_10.eContents().get(4);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Action cReductionCallAction_11_0 = (Action)cGroup_11.eContents().get(0);
		private final Assignment cReductionAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final CrossReference cReductionReductionCrossReference_11_1_0 = (CrossReference)cReductionAssignment_11_1.eContents().get(0);
		private final RuleCall cReductionReductionQualifiedNameParserRuleCall_11_1_0_1 = (RuleCall)cReductionReductionCrossReference_11_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_11_2 = (Keyword)cGroup_11.eContents().get(2);
		private final Assignment cIteratorAssignment_11_3 = (Assignment)cGroup_11.eContents().get(3);
		private final RuleCall cIteratorSpaceIteratorParserRuleCall_11_3_0 = (RuleCall)cIteratorAssignment_11_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11_4 = (Keyword)cGroup_11.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_11_5 = (Keyword)cGroup_11.eContents().get(5);
		private final Assignment cArgAssignment_11_6 = (Assignment)cGroup_11.eContents().get(6);
		private final RuleCall cArgExpressionParserRuleCall_11_6_0 = (RuleCall)cArgAssignment_11_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_11_7 = (Keyword)cGroup_11.eContents().get(7);
		private final RuleCall cVarRefParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		
		//Atomic Expression:
		//	{IntConstant} value=INT | {RealConstant} value=REAL | Real2Constant | Real3Constant | {BoolConstant} (value?='true' |
		//	'false') | {Real2x2Constant} '{' x=Real2Constant ',' y=Real2Constant '}' | {Real3x3Constant} '{' x=Real3Constant ','
		//	y=Real3Constant ',' z=Real3Constant '}' | {RealXCompactConstant} type=BasicType '(' value=REAL ')' | {MinConstant}
		//	type=BasicType '.MinValue' | {MaxConstant} type=BasicType '.MaxValue' | {FunctionCall}
		//	function=[Function|QualifiedName] '(' (args+=Expression (',' args+=Expression)*)? ')' | {ReductionCall}
		//	reduction=[Reduction|QualifiedName] '{' iterator=SpaceIterator '}' '(' arg=Expression ')' | VarRef;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntConstant} value=INT | {RealConstant} value=REAL | Real2Constant | Real3Constant | {BoolConstant} (value?='true' |
		//'false') | {Real2x2Constant} '{' x=Real2Constant ',' y=Real2Constant '}' | {Real3x3Constant} '{' x=Real3Constant ','
		//y=Real3Constant ',' z=Real3Constant '}' | {RealXCompactConstant} type=BasicType '(' value=REAL ')' | {MinConstant}
		//type=BasicType '.MinValue' | {MaxConstant} type=BasicType '.MaxValue' | {FunctionCall}
		//function=[Function|QualifiedName] '(' (args+=Expression (',' args+=Expression)*)? ')' | {ReductionCall}
		//reduction=[Reduction|QualifiedName] '{' iterator=SpaceIterator '}' '(' arg=Expression ')' | VarRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IntConstant} value=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{IntConstant}
		public Action getIntConstantAction_0_0() { return cIntConstantAction_0_0; }
		
		//value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }
		
		//{RealConstant} value=REAL
		public Group getGroup_1() { return cGroup_1; }
		
		//{RealConstant}
		public Action getRealConstantAction_1_0() { return cRealConstantAction_1_0; }
		
		//value=REAL
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//REAL
		public RuleCall getValueREALTerminalRuleCall_1_1_0() { return cValueREALTerminalRuleCall_1_1_0; }
		
		//Real2Constant
		public RuleCall getReal2ConstantParserRuleCall_2() { return cReal2ConstantParserRuleCall_2; }
		
		//Real3Constant
		public RuleCall getReal3ConstantParserRuleCall_3() { return cReal3ConstantParserRuleCall_3; }
		
		//{BoolConstant} (value?='true' | 'false')
		public Group getGroup_4() { return cGroup_4; }
		
		//{BoolConstant}
		public Action getBoolConstantAction_4_0() { return cBoolConstantAction_4_0; }
		
		//(value?='true' | 'false')
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//value?='true'
		public Assignment getValueAssignment_4_1_0() { return cValueAssignment_4_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_4_1_0_0() { return cValueTrueKeyword_4_1_0_0; }
		
		//'false'
		public Keyword getFalseKeyword_4_1_1() { return cFalseKeyword_4_1_1; }
		
		//{Real2x2Constant} '{' x=Real2Constant ',' y=Real2Constant '}'
		public Group getGroup_5() { return cGroup_5; }
		
		//{Real2x2Constant}
		public Action getReal2x2ConstantAction_5_0() { return cReal2x2ConstantAction_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//x=Real2Constant
		public Assignment getXAssignment_5_2() { return cXAssignment_5_2; }
		
		//Real2Constant
		public RuleCall getXReal2ConstantParserRuleCall_5_2_0() { return cXReal2ConstantParserRuleCall_5_2_0; }
		
		//','
		public Keyword getCommaKeyword_5_3() { return cCommaKeyword_5_3; }
		
		//y=Real2Constant
		public Assignment getYAssignment_5_4() { return cYAssignment_5_4; }
		
		//Real2Constant
		public RuleCall getYReal2ConstantParserRuleCall_5_4_0() { return cYReal2ConstantParserRuleCall_5_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_5() { return cRightCurlyBracketKeyword_5_5; }
		
		//{Real3x3Constant} '{' x=Real3Constant ',' y=Real3Constant ',' z=Real3Constant '}'
		public Group getGroup_6() { return cGroup_6; }
		
		//{Real3x3Constant}
		public Action getReal3x3ConstantAction_6_0() { return cReal3x3ConstantAction_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//x=Real3Constant
		public Assignment getXAssignment_6_2() { return cXAssignment_6_2; }
		
		//Real3Constant
		public RuleCall getXReal3ConstantParserRuleCall_6_2_0() { return cXReal3ConstantParserRuleCall_6_2_0; }
		
		//','
		public Keyword getCommaKeyword_6_3() { return cCommaKeyword_6_3; }
		
		//y=Real3Constant
		public Assignment getYAssignment_6_4() { return cYAssignment_6_4; }
		
		//Real3Constant
		public RuleCall getYReal3ConstantParserRuleCall_6_4_0() { return cYReal3ConstantParserRuleCall_6_4_0; }
		
		//','
		public Keyword getCommaKeyword_6_5() { return cCommaKeyword_6_5; }
		
		//z=Real3Constant
		public Assignment getZAssignment_6_6() { return cZAssignment_6_6; }
		
		//Real3Constant
		public RuleCall getZReal3ConstantParserRuleCall_6_6_0() { return cZReal3ConstantParserRuleCall_6_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_7() { return cRightCurlyBracketKeyword_6_7; }
		
		//{RealXCompactConstant} type=BasicType '(' value=REAL ')'
		public Group getGroup_7() { return cGroup_7; }
		
		//{RealXCompactConstant}
		public Action getRealXCompactConstantAction_7_0() { return cRealXCompactConstantAction_7_0; }
		
		//type=BasicType
		public Assignment getTypeAssignment_7_1() { return cTypeAssignment_7_1; }
		
		//BasicType
		public RuleCall getTypeBasicTypeEnumRuleCall_7_1_0() { return cTypeBasicTypeEnumRuleCall_7_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_2() { return cLeftParenthesisKeyword_7_2; }
		
		//value=REAL
		public Assignment getValueAssignment_7_3() { return cValueAssignment_7_3; }
		
		//REAL
		public RuleCall getValueREALTerminalRuleCall_7_3_0() { return cValueREALTerminalRuleCall_7_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_4() { return cRightParenthesisKeyword_7_4; }
		
		//{MinConstant} type=BasicType '.MinValue'
		public Group getGroup_8() { return cGroup_8; }
		
		//{MinConstant}
		public Action getMinConstantAction_8_0() { return cMinConstantAction_8_0; }
		
		//type=BasicType
		public Assignment getTypeAssignment_8_1() { return cTypeAssignment_8_1; }
		
		//BasicType
		public RuleCall getTypeBasicTypeEnumRuleCall_8_1_0() { return cTypeBasicTypeEnumRuleCall_8_1_0; }
		
		//'.MinValue'
		public Keyword getMinValueKeyword_8_2() { return cMinValueKeyword_8_2; }
		
		//{MaxConstant} type=BasicType '.MaxValue'
		public Group getGroup_9() { return cGroup_9; }
		
		//{MaxConstant}
		public Action getMaxConstantAction_9_0() { return cMaxConstantAction_9_0; }
		
		//type=BasicType
		public Assignment getTypeAssignment_9_1() { return cTypeAssignment_9_1; }
		
		//BasicType
		public RuleCall getTypeBasicTypeEnumRuleCall_9_1_0() { return cTypeBasicTypeEnumRuleCall_9_1_0; }
		
		//'.MaxValue'
		public Keyword getMaxValueKeyword_9_2() { return cMaxValueKeyword_9_2; }
		
		//{FunctionCall} function=[Function|QualifiedName] '(' (args+=Expression (',' args+=Expression)*)? ')'
		public Group getGroup_10() { return cGroup_10; }
		
		//{FunctionCall}
		public Action getFunctionCallAction_10_0() { return cFunctionCallAction_10_0; }
		
		//function=[Function|QualifiedName]
		public Assignment getFunctionAssignment_10_1() { return cFunctionAssignment_10_1; }
		
		//[Function|QualifiedName]
		public CrossReference getFunctionFunctionCrossReference_10_1_0() { return cFunctionFunctionCrossReference_10_1_0; }
		
		//QualifiedName
		public RuleCall getFunctionFunctionQualifiedNameParserRuleCall_10_1_0_1() { return cFunctionFunctionQualifiedNameParserRuleCall_10_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_10_2() { return cLeftParenthesisKeyword_10_2; }
		
		//(args+=Expression (',' args+=Expression)*)?
		public Group getGroup_10_3() { return cGroup_10_3; }
		
		//args+=Expression
		public Assignment getArgsAssignment_10_3_0() { return cArgsAssignment_10_3_0; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_10_3_0_0() { return cArgsExpressionParserRuleCall_10_3_0_0; }
		
		//(',' args+=Expression)*
		public Group getGroup_10_3_1() { return cGroup_10_3_1; }
		
		//','
		public Keyword getCommaKeyword_10_3_1_0() { return cCommaKeyword_10_3_1_0; }
		
		//args+=Expression
		public Assignment getArgsAssignment_10_3_1_1() { return cArgsAssignment_10_3_1_1; }
		
		//Expression
		public RuleCall getArgsExpressionParserRuleCall_10_3_1_1_0() { return cArgsExpressionParserRuleCall_10_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10_4() { return cRightParenthesisKeyword_10_4; }
		
		//{ReductionCall} reduction=[Reduction|QualifiedName] '{' iterator=SpaceIterator '}' '(' arg=Expression ')'
		public Group getGroup_11() { return cGroup_11; }
		
		//{ReductionCall}
		public Action getReductionCallAction_11_0() { return cReductionCallAction_11_0; }
		
		//reduction=[Reduction|QualifiedName]
		public Assignment getReductionAssignment_11_1() { return cReductionAssignment_11_1; }
		
		//[Reduction|QualifiedName]
		public CrossReference getReductionReductionCrossReference_11_1_0() { return cReductionReductionCrossReference_11_1_0; }
		
		//QualifiedName
		public RuleCall getReductionReductionQualifiedNameParserRuleCall_11_1_0_1() { return cReductionReductionQualifiedNameParserRuleCall_11_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_11_2() { return cLeftCurlyBracketKeyword_11_2; }
		
		//iterator=SpaceIterator
		public Assignment getIteratorAssignment_11_3() { return cIteratorAssignment_11_3; }
		
		//SpaceIterator
		public RuleCall getIteratorSpaceIteratorParserRuleCall_11_3_0() { return cIteratorSpaceIteratorParserRuleCall_11_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11_4() { return cRightCurlyBracketKeyword_11_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_11_5() { return cLeftParenthesisKeyword_11_5; }
		
		//arg=Expression
		public Assignment getArgAssignment_11_6() { return cArgAssignment_11_6; }
		
		//Expression
		public RuleCall getArgExpressionParserRuleCall_11_6_0() { return cArgExpressionParserRuleCall_11_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_11_7() { return cRightParenthesisKeyword_11_7; }
		
		//VarRef
		public RuleCall getVarRefParserRuleCall_12() { return cVarRefParserRuleCall_12; }
	}
	public class Real2ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.Real2Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cXAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cXREALTerminalRuleCall_1_0 = (RuleCall)cXAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cYAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cYREALTerminalRuleCall_3_0 = (RuleCall)cYAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Real2Constant:
		//	'{' x=REAL ',' y=REAL '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' x=REAL ',' y=REAL '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//x=REAL
		public Assignment getXAssignment_1() { return cXAssignment_1; }
		
		//REAL
		public RuleCall getXREALTerminalRuleCall_1_0() { return cXREALTerminalRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//y=REAL
		public Assignment getYAssignment_3() { return cYAssignment_3; }
		
		//REAL
		public RuleCall getYREALTerminalRuleCall_3_0() { return cYREALTerminalRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class Real3ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.Real3Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cXAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cXREALTerminalRuleCall_1_0 = (RuleCall)cXAssignment_1.eContents().get(0);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cYAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cYREALTerminalRuleCall_3_0 = (RuleCall)cYAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cZAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cZREALTerminalRuleCall_5_0 = (RuleCall)cZAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Real3Constant:
		//	'{' x=REAL ',' y=REAL ',' z=REAL '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' x=REAL ',' y=REAL ',' z=REAL '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//x=REAL
		public Assignment getXAssignment_1() { return cXAssignment_1; }
		
		//REAL
		public RuleCall getXREALTerminalRuleCall_1_0() { return cXREALTerminalRuleCall_1_0; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//y=REAL
		public Assignment getYAssignment_3() { return cYAssignment_3; }
		
		//REAL
		public RuleCall getYREALTerminalRuleCall_3_0() { return cYREALTerminalRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//z=REAL
		public Assignment getZAssignment_5() { return cZAssignment_5; }
		
		//REAL
		public RuleCall getZREALTerminalRuleCall_5_0() { return cZREALTerminalRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class VarRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.VarRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVariableVarCrossReference_0_0 = (CrossReference)cVariableAssignment_0.eContents().get(0);
		private final RuleCall cVariableVarIDTerminalRuleCall_0_0_1 = (RuleCall)cVariableVarCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSpaceIteratorsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSpaceIteratorsIteratorRangeOrRefParserRuleCall_1_1_0 = (RuleCall)cSpaceIteratorsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cSpaceIteratorsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSpaceIteratorsIteratorRangeOrRefParserRuleCall_1_2_1_0 = (RuleCall)cSpaceIteratorsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCircumflexAccentLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTimeIteratorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTimeIteratorTimeIteratorRefParserRuleCall_2_1_0 = (RuleCall)cTimeIteratorAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFullStopKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFieldsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFieldsIDTerminalRuleCall_3_1_0 = (RuleCall)cFieldsAssignment_3_1.eContents().get(0);
		
		//VarRef:
		//	variable=[Var] ('{' spaceIterators+=IteratorRangeOrRef (',' spaceIterators+=IteratorRangeOrRef)* '}')? ('^{'
		//	timeIterator=TimeIteratorRef '}')? ('.' fields+=ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=[Var] ('{' spaceIterators+=IteratorRangeOrRef (',' spaceIterators+=IteratorRangeOrRef)* '}')? ('^{'
		//timeIterator=TimeIteratorRef '}')? ('.' fields+=ID)*
		public Group getGroup() { return cGroup; }
		
		//variable=[Var]
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//[Var]
		public CrossReference getVariableVarCrossReference_0_0() { return cVariableVarCrossReference_0_0; }
		
		//ID
		public RuleCall getVariableVarIDTerminalRuleCall_0_0_1() { return cVariableVarIDTerminalRuleCall_0_0_1; }
		
		//('{' spaceIterators+=IteratorRangeOrRef (',' spaceIterators+=IteratorRangeOrRef)* '}')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//spaceIterators+=IteratorRangeOrRef
		public Assignment getSpaceIteratorsAssignment_1_1() { return cSpaceIteratorsAssignment_1_1; }
		
		//IteratorRangeOrRef
		public RuleCall getSpaceIteratorsIteratorRangeOrRefParserRuleCall_1_1_0() { return cSpaceIteratorsIteratorRangeOrRefParserRuleCall_1_1_0; }
		
		//(',' spaceIterators+=IteratorRangeOrRef)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//spaceIterators+=IteratorRangeOrRef
		public Assignment getSpaceIteratorsAssignment_1_2_1() { return cSpaceIteratorsAssignment_1_2_1; }
		
		//IteratorRangeOrRef
		public RuleCall getSpaceIteratorsIteratorRangeOrRefParserRuleCall_1_2_1_0() { return cSpaceIteratorsIteratorRangeOrRefParserRuleCall_1_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
		
		//('^{' timeIterator=TimeIteratorRef '}')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'^{'
		public Keyword getCircumflexAccentLeftCurlyBracketKeyword_2_0() { return cCircumflexAccentLeftCurlyBracketKeyword_2_0; }
		
		//timeIterator=TimeIteratorRef
		public Assignment getTimeIteratorAssignment_2_1() { return cTimeIteratorAssignment_2_1; }
		
		//TimeIteratorRef
		public RuleCall getTimeIteratorTimeIteratorRefParserRuleCall_2_1_0() { return cTimeIteratorTimeIteratorRefParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
		
		//('.' fields+=ID)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'.'
		public Keyword getFullStopKeyword_3_0() { return cFullStopKeyword_3_0; }
		
		//fields+=ID
		public Assignment getFieldsAssignment_3_1() { return cFieldsAssignment_3_1; }
		
		//ID
		public RuleCall getFieldsIDTerminalRuleCall_3_1_0() { return cFieldsIDTerminalRuleCall_3_1_0; }
	}
	public class IteratorRangeOrRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.IteratorRangeOrRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSpaceIteratorRangeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSpaceIteratorRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IteratorRangeOrRef:
		//	SpaceIteratorRange | SpaceIteratorRef;
		@Override public ParserRule getRule() { return rule; }
		
		//SpaceIteratorRange | SpaceIteratorRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SpaceIteratorRange
		public RuleCall getSpaceIteratorRangeParserRuleCall_0() { return cSpaceIteratorRangeParserRuleCall_0; }
		
		//SpaceIteratorRef
		public RuleCall getSpaceIteratorRefParserRuleCall_1() { return cSpaceIteratorRefParserRuleCall_1; }
	}
	public class TimeIteratorRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.TimeIteratorRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIteratorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cIteratorTimeIteratorCrossReference_0_0 = (CrossReference)cIteratorAssignment_0.eContents().get(0);
		private final RuleCall cIteratorTimeIteratorIDTerminalRuleCall_0_0_1 = (RuleCall)cIteratorTimeIteratorCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cInitAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final Keyword cInitEqualsSignKeyword_1_0_0_0 = (Keyword)cInitAssignment_1_0_0.eContents().get(0);
		private final Assignment cNextAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final Keyword cNextPlusSignKeyword_1_0_1_0 = (Keyword)cNextAssignment_1_0_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//TimeIteratorRef:
		//	iterator=[TimeIterator] ((init?='=' | next?='+') value=INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//iterator=[TimeIterator] ((init?='=' | next?='+') value=INT)?
		public Group getGroup() { return cGroup; }
		
		//iterator=[TimeIterator]
		public Assignment getIteratorAssignment_0() { return cIteratorAssignment_0; }
		
		//[TimeIterator]
		public CrossReference getIteratorTimeIteratorCrossReference_0_0() { return cIteratorTimeIteratorCrossReference_0_0; }
		
		//ID
		public RuleCall getIteratorTimeIteratorIDTerminalRuleCall_0_0_1() { return cIteratorTimeIteratorIDTerminalRuleCall_0_0_1; }
		
		//((init?='=' | next?='+') value=INT)?
		public Group getGroup_1() { return cGroup_1; }
		
		//(init?='=' | next?='+')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//init?='='
		public Assignment getInitAssignment_1_0_0() { return cInitAssignment_1_0_0; }
		
		//'='
		public Keyword getInitEqualsSignKeyword_1_0_0_0() { return cInitEqualsSignKeyword_1_0_0_0; }
		
		//next?='+'
		public Assignment getNextAssignment_1_0_1() { return cNextAssignment_1_0_1; }
		
		//'+'
		public Keyword getNextPlusSignKeyword_1_0_1_0() { return cNextPlusSignKeyword_1_0_1_0; }
		
		//value=INT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_1_0() { return cValueINTTerminalRuleCall_1_1_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		///* DATA TYPE *********************************************/ QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	
	public class BasicTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.BasicType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIntDoubleStruckCapitalNKeyword_0_0 = (Keyword)cIntEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRealEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRealDoubleStruckCapitalRKeyword_1_0 = (Keyword)cRealEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cReal2EnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cReal2DoubleStruckCapitalRSuperscriptTwoKeyword_2_0 = (Keyword)cReal2EnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cReal2x2EnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cReal2x2DoubleStruckCapitalRSuperscriptTwoModifierLetterSmallXSuperscriptTwoKeyword_3_0 = (Keyword)cReal2x2EnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cReal3EnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cReal3DoubleStruckCapitalRSuperscriptThreeKeyword_4_0 = (Keyword)cReal3EnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cReal3x3EnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cReal3x3DoubleStruckCapitalRSuperscriptThreeModifierLetterSmallXSuperscriptThreeKeyword_5_0 = (Keyword)cReal3x3EnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cBoolEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cBoolDoubleStruckCapitalGammaKeyword_6_0 = (Keyword)cBoolEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum BasicType:
		//	Int='\\u2115' |
		//	Real='\\u211D' |
		//	Real2='\\u211D\\u00B2' |
		//	Real2x2='\\u211D\\u00B2\\u02E3\\u00B2' |
		//	Real3='\\u211D\\u00B3' |
		//	Real3x3='\\u211D\\u00B3\\u02E3\\u00B3' |
		//	Bool='\\u213E';
		public EnumRule getRule() { return rule; }
		
		//Int='\\u2115' | Real='\\u211D' | Real2='\\u211D\\u00B2' | Real2x2='\\u211D\\u00B2\\u02E3\\u00B2' | Real3='\\u211D\\u00B3' |
		//Real3x3='\\u211D\\u00B3\\u02E3\\u00B3' | Bool='\\u213E'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Int='\\u2115'
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_0() { return cIntEnumLiteralDeclaration_0; }
		
		//'\\u2115'
		public Keyword getIntDoubleStruckCapitalNKeyword_0_0() { return cIntDoubleStruckCapitalNKeyword_0_0; }
		
		//Real='\\u211D'
		public EnumLiteralDeclaration getRealEnumLiteralDeclaration_1() { return cRealEnumLiteralDeclaration_1; }
		
		//'\\u211D'
		public Keyword getRealDoubleStruckCapitalRKeyword_1_0() { return cRealDoubleStruckCapitalRKeyword_1_0; }
		
		//Real2='\\u211D\\u00B2'
		public EnumLiteralDeclaration getReal2EnumLiteralDeclaration_2() { return cReal2EnumLiteralDeclaration_2; }
		
		//'\\u211D\\u00B2'
		public Keyword getReal2DoubleStruckCapitalRSuperscriptTwoKeyword_2_0() { return cReal2DoubleStruckCapitalRSuperscriptTwoKeyword_2_0; }
		
		//Real2x2='\\u211D\\u00B2\\u02E3\\u00B2'
		public EnumLiteralDeclaration getReal2x2EnumLiteralDeclaration_3() { return cReal2x2EnumLiteralDeclaration_3; }
		
		//'\\u211D\\u00B2\\u02E3\\u00B2'
		public Keyword getReal2x2DoubleStruckCapitalRSuperscriptTwoModifierLetterSmallXSuperscriptTwoKeyword_3_0() { return cReal2x2DoubleStruckCapitalRSuperscriptTwoModifierLetterSmallXSuperscriptTwoKeyword_3_0; }
		
		//Real3='\\u211D\\u00B3'
		public EnumLiteralDeclaration getReal3EnumLiteralDeclaration_4() { return cReal3EnumLiteralDeclaration_4; }
		
		//'\\u211D\\u00B3'
		public Keyword getReal3DoubleStruckCapitalRSuperscriptThreeKeyword_4_0() { return cReal3DoubleStruckCapitalRSuperscriptThreeKeyword_4_0; }
		
		//Real3x3='\\u211D\\u00B3\\u02E3\\u00B3'
		public EnumLiteralDeclaration getReal3x3EnumLiteralDeclaration_5() { return cReal3x3EnumLiteralDeclaration_5; }
		
		//'\\u211D\\u00B3\\u02E3\\u00B3'
		public Keyword getReal3x3DoubleStruckCapitalRSuperscriptThreeModifierLetterSmallXSuperscriptThreeKeyword_5_0() { return cReal3x3DoubleStruckCapitalRSuperscriptThreeModifierLetterSmallXSuperscriptThreeKeyword_5_0; }
		
		//Bool='\\u213E'
		public EnumLiteralDeclaration getBoolEnumLiteralDeclaration_6() { return cBoolEnumLiteralDeclaration_6; }
		
		//'\\u213E'
		public Keyword getBoolDoubleStruckCapitalGammaKeyword_6_0() { return cBoolDoubleStruckCapitalGammaKeyword_6_0; }
	}
	public class ItemTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.ItemType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNodeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNodeNodeKeyword_0_0 = (Keyword)cNodeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCellEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCellCellKeyword_1_0 = (Keyword)cCellEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFaceEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFaceFaceKeyword_2_0 = (Keyword)cFaceEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ItemType:
		//	node | cell | face;
		public EnumRule getRule() { return rule; }
		
		//node | cell | face
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//node
		public EnumLiteralDeclaration getNodeEnumLiteralDeclaration_0() { return cNodeEnumLiteralDeclaration_0; }
		
		//"node"
		public Keyword getNodeNodeKeyword_0_0() { return cNodeNodeKeyword_0_0; }
		
		//cell
		public EnumLiteralDeclaration getCellEnumLiteralDeclaration_1() { return cCellEnumLiteralDeclaration_1; }
		
		//"cell"
		public Keyword getCellCellKeyword_1_0() { return cCellCellKeyword_1_0; }
		
		//face
		public EnumLiteralDeclaration getFaceEnumLiteralDeclaration_2() { return cFaceEnumLiteralDeclaration_2; }
		
		//"face"
		public Keyword getFaceFaceKeyword_2_0() { return cFaceFaceKeyword_2_0; }
	}
	
	private final NablaModuleElements pNablaModule;
	private final ImportElements pImport;
	private final DeclarationBlockElements pDeclarationBlock;
	private final JobElements pJob;
	private final InstructionElements pInstruction;
	private final TimeIteratorElements pTimeIterator;
	private final SpaceIteratorElements pSpaceIterator;
	private final SpaceIteratorRangeElements pSpaceIteratorRange;
	private final SpaceIteratorRefElements pSpaceIteratorRef;
	private final ScalarVarDefinitionElements pScalarVarDefinition;
	private final VarGroupDeclarationElements pVarGroupDeclaration;
	private final VarElements pVar;
	private final ScalarVarElements pScalarVar;
	private final ArrayVarElements pArrayVar;
	private final ConnectivityElements pConnectivity;
	private final ItemArgTypeElements pItemArgType;
	private final FunctionElements pFunction;
	private final FunctionArgElements pFunctionArg;
	private final ReductionElements pReduction;
	private final ReductionArgElements pReductionArg;
	private final ExpressionElements pExpression;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final EqualityElements pEquality;
	private final ComparisonElements pComparison;
	private final PlusOrMinusElements pPlusOrMinus;
	private final MulOrDivElements pMulOrDiv;
	private final PrimaryElements pPrimary;
	private final AtomicElements pAtomic;
	private final Real2ConstantElements pReal2Constant;
	private final Real3ConstantElements pReal3Constant;
	private final VarRefElements pVarRef;
	private final IteratorRangeOrRefElements pIteratorRangeOrRef;
	private final TimeIteratorRefElements pTimeIteratorRef;
	private final BasicTypeElements eBasicType;
	private final ItemTypeElements eItemType;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final TerminalRule tID;
	private final TerminalRule tREAL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public NablaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pNablaModule = new NablaModuleElements();
		this.pImport = new ImportElements();
		this.pDeclarationBlock = new DeclarationBlockElements();
		this.pJob = new JobElements();
		this.pInstruction = new InstructionElements();
		this.pTimeIterator = new TimeIteratorElements();
		this.pSpaceIterator = new SpaceIteratorElements();
		this.pSpaceIteratorRange = new SpaceIteratorRangeElements();
		this.pSpaceIteratorRef = new SpaceIteratorRefElements();
		this.pScalarVarDefinition = new ScalarVarDefinitionElements();
		this.pVarGroupDeclaration = new VarGroupDeclarationElements();
		this.pVar = new VarElements();
		this.pScalarVar = new ScalarVarElements();
		this.pArrayVar = new ArrayVarElements();
		this.pConnectivity = new ConnectivityElements();
		this.pItemArgType = new ItemArgTypeElements();
		this.pFunction = new FunctionElements();
		this.pFunctionArg = new FunctionArgElements();
		this.pReduction = new ReductionElements();
		this.pReductionArg = new ReductionArgElements();
		this.pExpression = new ExpressionElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pEquality = new EqualityElements();
		this.pComparison = new ComparisonElements();
		this.pPlusOrMinus = new PlusOrMinusElements();
		this.pMulOrDiv = new MulOrDivElements();
		this.pPrimary = new PrimaryElements();
		this.pAtomic = new AtomicElements();
		this.pReal2Constant = new Real2ConstantElements();
		this.pReal3Constant = new Real3ConstantElements();
		this.pVarRef = new VarRefElements();
		this.pIteratorRangeOrRef = new IteratorRangeOrRefElements();
		this.pTimeIteratorRef = new TimeIteratorRefElements();
		this.eBasicType = new BasicTypeElements();
		this.eItemType = new ItemTypeElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.ID");
		this.tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fr.cea.nabla.Nabla.REAL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.cea.nabla.Nabla".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//NablaModule:
	//	'module' name=QualifiedName ';'
	//	imports+=Import*
	//	blocks+=DeclarationBlock*
	//	variables+=(ScalarVarDefinition | VarGroupDeclaration)*
	//	jobs+=Job*;
	public NablaModuleElements getNablaModuleAccess() {
		return pNablaModule;
	}
	
	public ParserRule getNablaModuleRule() {
		return getNablaModuleAccess().getRule();
	}
	
	//Import:
	//	'with' importedNamespace=QualifiedNameWithWildcard ';';
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//DeclarationBlock:
	//	{ConnectivityDeclarationBlock} 'connectivities' '{' connectivities+=Connectivity* '}' | {FunctionDeclarationBlock}
	//	'functions' '{' functions+=(Function | Reduction)* '}';
	public DeclarationBlockElements getDeclarationBlockAccess() {
		return pDeclarationBlock;
	}
	
	public ParserRule getDeclarationBlockRule() {
		return getDeclarationBlockAccess().getRule();
	}
	
	///* JOBS **************************************************/ Job:
	//	{InstructionJob} name=ID ':' instruction=Instruction | {TimeLoopJob} name=ID ':' '\\u2200' iterator=TimeIterator ','
	//	initialization=Instruction ',' body=Instruction;
	public JobElements getJobAccess() {
		return pJob;
	}
	
	public ParserRule getJobRule() {
		return getJobAccess().getRule();
	}
	
	///* INSTRUCTIONS ******************************************/ Instruction:
	//	ScalarVarDefinition | VarGroupDeclaration | {InstructionBlock} '{' instructions+=Instruction+ '}' | {Affectation}
	//	varRef=VarRef '=' expression=Expression ';' | {Loop} '\\u2200' iterator=SpaceIterator ',' body=Instruction | {If} 'if'
	//	'(' condition=Expression ')' then=Instruction (=> 'else' else=Instruction)?;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	///* ITERATEURS ********************************************/ TimeIterator:
	//	name=ID '\\u2208' '\\u2115';
	public TimeIteratorElements getTimeIteratorAccess() {
		return pTimeIterator;
	}
	
	public ParserRule getTimeIteratorRule() {
		return getTimeIteratorAccess().getRule();
	}
	
	//SpaceIterator:
	//	name=ID '\\u2208' range=SpaceIteratorRange;
	public SpaceIteratorElements getSpaceIteratorAccess() {
		return pSpaceIterator;
	}
	
	public ParserRule getSpaceIteratorRule() {
		return getSpaceIteratorAccess().getRule();
	}
	
	//SpaceIteratorRange:
	//	connectivity=[Connectivity] '(' (args+=SpaceIteratorRef (',' args+=SpaceIteratorRef)*)? ')';
	public SpaceIteratorRangeElements getSpaceIteratorRangeAccess() {
		return pSpaceIteratorRange;
	}
	
	public ParserRule getSpaceIteratorRangeRule() {
		return getSpaceIteratorRangeAccess().getRule();
	}
	
	//SpaceIteratorRef:
	//	(prev?='\\u25C4' | next?='\\u25BA') '(' iterator=[SpaceIterator] ')' | iterator=[SpaceIterator];
	public SpaceIteratorRefElements getSpaceIteratorRefAccess() {
		return pSpaceIteratorRef;
	}
	
	public ParserRule getSpaceIteratorRefRule() {
		return getSpaceIteratorRefAccess().getRule();
	}
	
	///* VARIABLES ********************************************/ ScalarVarDefinition:
	//	const?='const'? type=BasicType variable=ScalarVar '=' defaultValue=Expression ';';
	public ScalarVarDefinitionElements getScalarVarDefinitionAccess() {
		return pScalarVarDefinition;
	}
	
	public ParserRule getScalarVarDefinitionRule() {
		return getScalarVarDefinitionAccess().getRule();
	}
	
	//VarGroupDeclaration:
	//	type=BasicType variables+=Var (',' variables+=Var)* ';';
	public VarGroupDeclarationElements getVarGroupDeclarationAccess() {
		return pVarGroupDeclaration;
	}
	
	public ParserRule getVarGroupDeclarationRule() {
		return getVarGroupDeclarationAccess().getRule();
	}
	
	//Var:
	//	ScalarVar | ArrayVar;
	public VarElements getVarAccess() {
		return pVar;
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}
	
	//ScalarVar:
	//	name=ID;
	public ScalarVarElements getScalarVarAccess() {
		return pScalarVar;
	}
	
	public ParserRule getScalarVarRule() {
		return getScalarVarAccess().getRule();
	}
	
	//ArrayVar:
	//	name=ID '[' dimensions+=[Connectivity] (',' dimensions+=[Connectivity])* ']';
	public ArrayVarElements getArrayVarAccess() {
		return pArrayVar;
	}
	
	public ParserRule getArrayVarRule() {
		return getArrayVarAccess().getRule();
	}
	
	///* CONNECTIVITES *****************************************/ Connectivity:
	//	name=ID ':' '(' (inTypes+=ItemType (',' inTypes+=ItemType)* | '\\u2205') ')' '\\u2192' returnType=ItemArgType ';';
	public ConnectivityElements getConnectivityAccess() {
		return pConnectivity;
	}
	
	public ParserRule getConnectivityRule() {
		return getConnectivityAccess().getRule();
	}
	
	//ItemArgType:
	//	multiple?='{' type=ItemType '}' | type=ItemType;
	public ItemArgTypeElements getItemArgTypeAccess() {
		return pItemArgType;
	}
	
	public ParserRule getItemArgTypeRule() {
		return getItemArgTypeAccess().getRule();
	}
	
	///* FONCTIONS / REDUCTIONS ********************************/ Function Callable:
	//	{Function} name=ID ':' argGroups+=FunctionArg (',' argGroups+=FunctionArg)* ';';
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//FunctionArg:
	//	'(' (inTypes+=BasicType (',' inTypes+=BasicType)* | '\\u2205') ')' '\\u2192' returnType=BasicType;
	public FunctionArgElements getFunctionArgAccess() {
		return pFunctionArg;
	}
	
	public ParserRule getFunctionArgRule() {
		return getFunctionArgAccess().getRule();
	}
	
	//Reduction Callable:
	//	{Reduction} name=ID ':' argGroups+=ReductionArg (',' argGroups+=ReductionArg)* ';';
	public ReductionElements getReductionAccess() {
		return pReduction;
	}
	
	public ParserRule getReductionRule() {
		return getReductionAccess().getRule();
	}
	
	//ReductionArg:
	//	'(' seed=Expression ',' collectionType=BasicType ')' '\\u2192' returnType=BasicType;
	public ReductionArgElements getReductionArgAccess() {
		return pReductionArg;
	}
	
	public ParserRule getReductionArgRule() {
		return getReductionArgAccess().getRule();
	}
	
	///* EXPRESSIONS ******************************************/ Expression:
	//	Or;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Or Expression:
	//	And ({Or.left=current} op='||' right=And)*;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And Expression:
	//	Equality ({And.left=current} op='&&' right=Equality)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Equality Expression:
	//	Comparison ({Equality.left=current} op=('==' | '!=') right=Comparison)*;
	public EqualityElements getEqualityAccess() {
		return pEquality;
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}
	
	//Comparison Expression:
	//	PlusOrMinus ({Comparison.left=current} op=('>=' | '<=' | '>' | '<') right=PlusOrMinus)*;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//PlusOrMinus Expression:
	//	MulOrDiv (({Plus.left=current} op='+' | {Minus.left=current} op='-') right=MulOrDiv)*;
	public PlusOrMinusElements getPlusOrMinusAccess() {
		return pPlusOrMinus;
	}
	
	public ParserRule getPlusOrMinusRule() {
		return getPlusOrMinusAccess().getRule();
	}
	
	//MulOrDiv Expression:
	//	Primary ({MulOrDiv.left=current} op=('*' | '/') right=Primary)*;
	public MulOrDivElements getMulOrDivAccess() {
		return pMulOrDiv;
	}
	
	public ParserRule getMulOrDivRule() {
		return getMulOrDivAccess().getRule();
	}
	
	//Primary Expression:
	//	{Parenthesis} '(' expression=Expression ')' | {UnaryMinus} '-' expression=Primary | {Not} '!' expression=Primary |
	//	Atomic;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//Atomic Expression:
	//	{IntConstant} value=INT | {RealConstant} value=REAL | Real2Constant | Real3Constant | {BoolConstant} (value?='true' |
	//	'false') | {Real2x2Constant} '{' x=Real2Constant ',' y=Real2Constant '}' | {Real3x3Constant} '{' x=Real3Constant ','
	//	y=Real3Constant ',' z=Real3Constant '}' | {RealXCompactConstant} type=BasicType '(' value=REAL ')' | {MinConstant}
	//	type=BasicType '.MinValue' | {MaxConstant} type=BasicType '.MaxValue' | {FunctionCall}
	//	function=[Function|QualifiedName] '(' (args+=Expression (',' args+=Expression)*)? ')' | {ReductionCall}
	//	reduction=[Reduction|QualifiedName] '{' iterator=SpaceIterator '}' '(' arg=Expression ')' | VarRef;
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	//Real2Constant:
	//	'{' x=REAL ',' y=REAL '}';
	public Real2ConstantElements getReal2ConstantAccess() {
		return pReal2Constant;
	}
	
	public ParserRule getReal2ConstantRule() {
		return getReal2ConstantAccess().getRule();
	}
	
	//Real3Constant:
	//	'{' x=REAL ',' y=REAL ',' z=REAL '}';
	public Real3ConstantElements getReal3ConstantAccess() {
		return pReal3Constant;
	}
	
	public ParserRule getReal3ConstantRule() {
		return getReal3ConstantAccess().getRule();
	}
	
	//VarRef:
	//	variable=[Var] ('{' spaceIterators+=IteratorRangeOrRef (',' spaceIterators+=IteratorRangeOrRef)* '}')? ('^{'
	//	timeIterator=TimeIteratorRef '}')? ('.' fields+=ID)*;
	public VarRefElements getVarRefAccess() {
		return pVarRef;
	}
	
	public ParserRule getVarRefRule() {
		return getVarRefAccess().getRule();
	}
	
	//IteratorRangeOrRef:
	//	SpaceIteratorRange | SpaceIteratorRef;
	public IteratorRangeOrRefElements getIteratorRangeOrRefAccess() {
		return pIteratorRangeOrRef;
	}
	
	public ParserRule getIteratorRangeOrRefRule() {
		return getIteratorRangeOrRefAccess().getRule();
	}
	
	//TimeIteratorRef:
	//	iterator=[TimeIterator] ((init?='=' | next?='+') value=INT)?;
	public TimeIteratorRefElements getTimeIteratorRefAccess() {
		return pTimeIteratorRef;
	}
	
	public ParserRule getTimeIteratorRefRule() {
		return getTimeIteratorRefAccess().getRule();
	}
	
	//enum BasicType:
	//	Int='\\u2115' |
	//	Real='\\u211D' |
	//	Real2='\\u211D\\u00B2' |
	//	Real2x2='\\u211D\\u00B2\\u02E3\\u00B2' |
	//	Real3='\\u211D\\u00B3' |
	//	Real3x3='\\u211D\\u00B3\\u02E3\\u00B3' |
	//	Bool='\\u213E';
	public BasicTypeElements getBasicTypeAccess() {
		return eBasicType;
	}
	
	public EnumRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}
	
	//enum ItemType:
	//	node | cell | face;
	public ItemTypeElements getItemTypeAccess() {
		return eItemType;
	}
	
	public EnumRule getItemTypeRule() {
		return getItemTypeAccess().getRule();
	}
	
	///* DATA TYPE *********************************************/ QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//@Override
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '\\u0394'..'\\u03F2' | '\\u220F'..'\\u221C' | '_') ('a'..'z' | 'A'..'Z' | '\\u0394'..'\\u03F2' |
	//	'0'..'9' | '\\u2211' | '_')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal REAL returns ecore::EDouble:
	//	'0'..'9'+ '.' '0'..'9'+ ('e' ('+' | '-') '0'..'9'+)?;
	public TerminalRule getREALRule() {
		return tREAL;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
