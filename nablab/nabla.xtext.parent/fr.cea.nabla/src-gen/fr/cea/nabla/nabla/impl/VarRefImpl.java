/**
 * generated by Xtext 2.19.0
 */
package fr.cea.nabla.nabla.impl;

import fr.cea.nabla.nabla.IteratorRangeOrRef;
import fr.cea.nabla.nabla.NablaPackage;
import fr.cea.nabla.nabla.TimeIteratorRef;
import fr.cea.nabla.nabla.Var;
import fr.cea.nabla.nabla.VarRef;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Var Ref</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.cea.nabla.nabla.impl.VarRefImpl#getVariable <em>Variable</em>}</li>
 *   <li>{@link fr.cea.nabla.nabla.impl.VarRefImpl#getSpaceIterators <em>Space Iterators</em>}</li>
 *   <li>{@link fr.cea.nabla.nabla.impl.VarRefImpl#getTimeIterator <em>Time Iterator</em>}</li>
 *   <li>{@link fr.cea.nabla.nabla.impl.VarRefImpl#getFields <em>Fields</em>}</li>
 * </ul>
 *
 * @generated
 */
public class VarRefImpl extends ExpressionImpl implements VarRef
{
  /**
   * The cached value of the '{@link #getVariable() <em>Variable</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable()
   * @generated
   * @ordered
   */
  protected Var variable;

  /**
   * The cached value of the '{@link #getSpaceIterators() <em>Space Iterators</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSpaceIterators()
   * @generated
   * @ordered
   */
  protected EList<IteratorRangeOrRef> spaceIterators;

  /**
   * The cached value of the '{@link #getTimeIterator() <em>Time Iterator</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimeIterator()
   * @generated
   * @ordered
   */
  protected TimeIteratorRef timeIterator;

  /**
   * The cached value of the '{@link #getFields() <em>Fields</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFields()
   * @generated
   * @ordered
   */
  protected EList<String> fields;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VarRefImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return NablaPackage.Literals.VAR_REF;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Var getVariable()
  {
    if (variable != null && variable.eIsProxy())
    {
      InternalEObject oldVariable = (InternalEObject)variable;
      variable = (Var)eResolveProxy(oldVariable);
      if (variable != oldVariable)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, NablaPackage.VAR_REF__VARIABLE, oldVariable, variable));
      }
    }
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Var basicGetVariable()
  {
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setVariable(Var newVariable)
  {
    Var oldVariable = variable;
    variable = newVariable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NablaPackage.VAR_REF__VARIABLE, oldVariable, variable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<IteratorRangeOrRef> getSpaceIterators()
  {
    if (spaceIterators == null)
    {
      spaceIterators = new EObjectContainmentEList<IteratorRangeOrRef>(IteratorRangeOrRef.class, this, NablaPackage.VAR_REF__SPACE_ITERATORS);
    }
    return spaceIterators;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TimeIteratorRef getTimeIterator()
  {
    return timeIterator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTimeIterator(TimeIteratorRef newTimeIterator, NotificationChain msgs)
  {
    TimeIteratorRef oldTimeIterator = timeIterator;
    timeIterator = newTimeIterator;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, NablaPackage.VAR_REF__TIME_ITERATOR, oldTimeIterator, newTimeIterator);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTimeIterator(TimeIteratorRef newTimeIterator)
  {
    if (newTimeIterator != timeIterator)
    {
      NotificationChain msgs = null;
      if (timeIterator != null)
        msgs = ((InternalEObject)timeIterator).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - NablaPackage.VAR_REF__TIME_ITERATOR, null, msgs);
      if (newTimeIterator != null)
        msgs = ((InternalEObject)newTimeIterator).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - NablaPackage.VAR_REF__TIME_ITERATOR, null, msgs);
      msgs = basicSetTimeIterator(newTimeIterator, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NablaPackage.VAR_REF__TIME_ITERATOR, newTimeIterator, newTimeIterator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getFields()
  {
    if (fields == null)
    {
      fields = new EDataTypeEList<String>(String.class, this, NablaPackage.VAR_REF__FIELDS);
    }
    return fields;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case NablaPackage.VAR_REF__SPACE_ITERATORS:
        return ((InternalEList<?>)getSpaceIterators()).basicRemove(otherEnd, msgs);
      case NablaPackage.VAR_REF__TIME_ITERATOR:
        return basicSetTimeIterator(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case NablaPackage.VAR_REF__VARIABLE:
        if (resolve) return getVariable();
        return basicGetVariable();
      case NablaPackage.VAR_REF__SPACE_ITERATORS:
        return getSpaceIterators();
      case NablaPackage.VAR_REF__TIME_ITERATOR:
        return getTimeIterator();
      case NablaPackage.VAR_REF__FIELDS:
        return getFields();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case NablaPackage.VAR_REF__VARIABLE:
        setVariable((Var)newValue);
        return;
      case NablaPackage.VAR_REF__SPACE_ITERATORS:
        getSpaceIterators().clear();
        getSpaceIterators().addAll((Collection<? extends IteratorRangeOrRef>)newValue);
        return;
      case NablaPackage.VAR_REF__TIME_ITERATOR:
        setTimeIterator((TimeIteratorRef)newValue);
        return;
      case NablaPackage.VAR_REF__FIELDS:
        getFields().clear();
        getFields().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case NablaPackage.VAR_REF__VARIABLE:
        setVariable((Var)null);
        return;
      case NablaPackage.VAR_REF__SPACE_ITERATORS:
        getSpaceIterators().clear();
        return;
      case NablaPackage.VAR_REF__TIME_ITERATOR:
        setTimeIterator((TimeIteratorRef)null);
        return;
      case NablaPackage.VAR_REF__FIELDS:
        getFields().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case NablaPackage.VAR_REF__VARIABLE:
        return variable != null;
      case NablaPackage.VAR_REF__SPACE_ITERATORS:
        return spaceIterators != null && !spaceIterators.isEmpty();
      case NablaPackage.VAR_REF__TIME_ITERATOR:
        return timeIterator != null;
      case NablaPackage.VAR_REF__FIELDS:
        return fields != null && !fields.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (fields: ");
    result.append(fields);
    result.append(')');
    return result.toString();
  }

} //VarRefImpl
