/**
 * generated by Xtext 2.19.0
 */
package fr.cea.nabla.nabla.impl;

import fr.cea.nabla.nabla.Connectivity;
import fr.cea.nabla.nabla.NablaPackage;
import fr.cea.nabla.nabla.SpaceIteratorRange;
import fr.cea.nabla.nabla.SpaceIteratorRef;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Space Iterator Range</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.cea.nabla.nabla.impl.SpaceIteratorRangeImpl#getConnectivity <em>Connectivity</em>}</li>
 *   <li>{@link fr.cea.nabla.nabla.impl.SpaceIteratorRangeImpl#getArgs <em>Args</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SpaceIteratorRangeImpl extends IteratorRangeOrRefImpl implements SpaceIteratorRange
{
  /**
   * The cached value of the '{@link #getConnectivity() <em>Connectivity</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConnectivity()
   * @generated
   * @ordered
   */
  protected Connectivity connectivity;

  /**
   * The cached value of the '{@link #getArgs() <em>Args</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArgs()
   * @generated
   * @ordered
   */
  protected EList<SpaceIteratorRef> args;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SpaceIteratorRangeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return NablaPackage.Literals.SPACE_ITERATOR_RANGE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Connectivity getConnectivity()
  {
    if (connectivity != null && connectivity.eIsProxy())
    {
      InternalEObject oldConnectivity = (InternalEObject)connectivity;
      connectivity = (Connectivity)eResolveProxy(oldConnectivity);
      if (connectivity != oldConnectivity)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, NablaPackage.SPACE_ITERATOR_RANGE__CONNECTIVITY, oldConnectivity, connectivity));
      }
    }
    return connectivity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Connectivity basicGetConnectivity()
  {
    return connectivity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setConnectivity(Connectivity newConnectivity)
  {
    Connectivity oldConnectivity = connectivity;
    connectivity = newConnectivity;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NablaPackage.SPACE_ITERATOR_RANGE__CONNECTIVITY, oldConnectivity, connectivity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<SpaceIteratorRef> getArgs()
  {
    if (args == null)
    {
      args = new EObjectContainmentEList<SpaceIteratorRef>(SpaceIteratorRef.class, this, NablaPackage.SPACE_ITERATOR_RANGE__ARGS);
    }
    return args;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case NablaPackage.SPACE_ITERATOR_RANGE__ARGS:
        return ((InternalEList<?>)getArgs()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case NablaPackage.SPACE_ITERATOR_RANGE__CONNECTIVITY:
        if (resolve) return getConnectivity();
        return basicGetConnectivity();
      case NablaPackage.SPACE_ITERATOR_RANGE__ARGS:
        return getArgs();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case NablaPackage.SPACE_ITERATOR_RANGE__CONNECTIVITY:
        setConnectivity((Connectivity)newValue);
        return;
      case NablaPackage.SPACE_ITERATOR_RANGE__ARGS:
        getArgs().clear();
        getArgs().addAll((Collection<? extends SpaceIteratorRef>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case NablaPackage.SPACE_ITERATOR_RANGE__CONNECTIVITY:
        setConnectivity((Connectivity)null);
        return;
      case NablaPackage.SPACE_ITERATOR_RANGE__ARGS:
        getArgs().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case NablaPackage.SPACE_ITERATOR_RANGE__CONNECTIVITY:
        return connectivity != null;
      case NablaPackage.SPACE_ITERATOR_RANGE__ARGS:
        return args != null && !args.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //SpaceIteratorRangeImpl
