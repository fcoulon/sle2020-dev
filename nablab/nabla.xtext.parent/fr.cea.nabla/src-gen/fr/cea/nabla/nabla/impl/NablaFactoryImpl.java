/**
 * generated by Xtext 2.19.0
 */
package fr.cea.nabla.nabla.impl;

import fr.cea.nabla.nabla.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class NablaFactoryImpl extends EFactoryImpl implements NablaFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static NablaFactory init()
  {
    try
    {
      NablaFactory theNablaFactory = (NablaFactory)EPackage.Registry.INSTANCE.getEFactory(NablaPackage.eNS_URI);
      if (theNablaFactory != null)
      {
        return theNablaFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new NablaFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NablaFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case NablaPackage.NABLA_MODULE: return createNablaModule();
      case NablaPackage.IMPORT: return createImport();
      case NablaPackage.DECLARATION_BLOCK: return createDeclarationBlock();
      case NablaPackage.JOB: return createJob();
      case NablaPackage.INSTRUCTION: return createInstruction();
      case NablaPackage.TIME_ITERATOR: return createTimeIterator();
      case NablaPackage.SPACE_ITERATOR: return createSpaceIterator();
      case NablaPackage.SPACE_ITERATOR_RANGE: return createSpaceIteratorRange();
      case NablaPackage.SPACE_ITERATOR_REF: return createSpaceIteratorRef();
      case NablaPackage.SCALAR_VAR_DEFINITION: return createScalarVarDefinition();
      case NablaPackage.VAR_GROUP_DECLARATION: return createVarGroupDeclaration();
      case NablaPackage.VAR: return createVar();
      case NablaPackage.SCALAR_VAR: return createScalarVar();
      case NablaPackage.ARRAY_VAR: return createArrayVar();
      case NablaPackage.CONNECTIVITY: return createConnectivity();
      case NablaPackage.ITEM_ARG_TYPE: return createItemArgType();
      case NablaPackage.CALLABLE: return createCallable();
      case NablaPackage.FUNCTION_ARG: return createFunctionArg();
      case NablaPackage.REDUCTION_ARG: return createReductionArg();
      case NablaPackage.EXPRESSION: return createExpression();
      case NablaPackage.REAL2_CONSTANT: return createReal2Constant();
      case NablaPackage.REAL3_CONSTANT: return createReal3Constant();
      case NablaPackage.VAR_REF: return createVarRef();
      case NablaPackage.ITERATOR_RANGE_OR_REF: return createIteratorRangeOrRef();
      case NablaPackage.TIME_ITERATOR_REF: return createTimeIteratorRef();
      case NablaPackage.CONNECTIVITY_DECLARATION_BLOCK: return createConnectivityDeclarationBlock();
      case NablaPackage.FUNCTION_DECLARATION_BLOCK: return createFunctionDeclarationBlock();
      case NablaPackage.INSTRUCTION_JOB: return createInstructionJob();
      case NablaPackage.TIME_LOOP_JOB: return createTimeLoopJob();
      case NablaPackage.INSTRUCTION_BLOCK: return createInstructionBlock();
      case NablaPackage.AFFECTATION: return createAffectation();
      case NablaPackage.LOOP: return createLoop();
      case NablaPackage.IF: return createIf();
      case NablaPackage.FUNCTION: return createFunction();
      case NablaPackage.REDUCTION: return createReduction();
      case NablaPackage.OR: return createOr();
      case NablaPackage.AND: return createAnd();
      case NablaPackage.EQUALITY: return createEquality();
      case NablaPackage.COMPARISON: return createComparison();
      case NablaPackage.PLUS: return createPlus();
      case NablaPackage.MINUS: return createMinus();
      case NablaPackage.MUL_OR_DIV: return createMulOrDiv();
      case NablaPackage.PARENTHESIS: return createParenthesis();
      case NablaPackage.UNARY_MINUS: return createUnaryMinus();
      case NablaPackage.NOT: return createNot();
      case NablaPackage.INT_CONSTANT: return createIntConstant();
      case NablaPackage.REAL_CONSTANT: return createRealConstant();
      case NablaPackage.BOOL_CONSTANT: return createBoolConstant();
      case NablaPackage.REAL2X2_CONSTANT: return createReal2x2Constant();
      case NablaPackage.REAL3X3_CONSTANT: return createReal3x3Constant();
      case NablaPackage.REAL_XCOMPACT_CONSTANT: return createRealXCompactConstant();
      case NablaPackage.MIN_CONSTANT: return createMinConstant();
      case NablaPackage.MAX_CONSTANT: return createMaxConstant();
      case NablaPackage.FUNCTION_CALL: return createFunctionCall();
      case NablaPackage.REDUCTION_CALL: return createReductionCall();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case NablaPackage.BASIC_TYPE:
        return createBasicTypeFromString(eDataType, initialValue);
      case NablaPackage.ITEM_TYPE:
        return createItemTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case NablaPackage.BASIC_TYPE:
        return convertBasicTypeToString(eDataType, instanceValue);
      case NablaPackage.ITEM_TYPE:
        return convertItemTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NablaModule createNablaModule()
  {
    NablaModuleImpl nablaModule = new NablaModuleImpl();
    return nablaModule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DeclarationBlock createDeclarationBlock()
  {
    DeclarationBlockImpl declarationBlock = new DeclarationBlockImpl();
    return declarationBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Job createJob()
  {
    JobImpl job = new JobImpl();
    return job;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Instruction createInstruction()
  {
    InstructionImpl instruction = new InstructionImpl();
    return instruction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TimeIterator createTimeIterator()
  {
    TimeIteratorImpl timeIterator = new TimeIteratorImpl();
    return timeIterator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SpaceIterator createSpaceIterator()
  {
    SpaceIteratorImpl spaceIterator = new SpaceIteratorImpl();
    return spaceIterator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SpaceIteratorRange createSpaceIteratorRange()
  {
    SpaceIteratorRangeImpl spaceIteratorRange = new SpaceIteratorRangeImpl();
    return spaceIteratorRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SpaceIteratorRef createSpaceIteratorRef()
  {
    SpaceIteratorRefImpl spaceIteratorRef = new SpaceIteratorRefImpl();
    return spaceIteratorRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ScalarVarDefinition createScalarVarDefinition()
  {
    ScalarVarDefinitionImpl scalarVarDefinition = new ScalarVarDefinitionImpl();
    return scalarVarDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VarGroupDeclaration createVarGroupDeclaration()
  {
    VarGroupDeclarationImpl varGroupDeclaration = new VarGroupDeclarationImpl();
    return varGroupDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Var createVar()
  {
    VarImpl var = new VarImpl();
    return var;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ScalarVar createScalarVar()
  {
    ScalarVarImpl scalarVar = new ScalarVarImpl();
    return scalarVar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ArrayVar createArrayVar()
  {
    ArrayVarImpl arrayVar = new ArrayVarImpl();
    return arrayVar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Connectivity createConnectivity()
  {
    ConnectivityImpl connectivity = new ConnectivityImpl();
    return connectivity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ItemArgType createItemArgType()
  {
    ItemArgTypeImpl itemArgType = new ItemArgTypeImpl();
    return itemArgType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Callable createCallable()
  {
    CallableImpl callable = new CallableImpl();
    return callable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionArg createFunctionArg()
  {
    FunctionArgImpl functionArg = new FunctionArgImpl();
    return functionArg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReductionArg createReductionArg()
  {
    ReductionArgImpl reductionArg = new ReductionArgImpl();
    return reductionArg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Real2Constant createReal2Constant()
  {
    Real2ConstantImpl real2Constant = new Real2ConstantImpl();
    return real2Constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Real3Constant createReal3Constant()
  {
    Real3ConstantImpl real3Constant = new Real3ConstantImpl();
    return real3Constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VarRef createVarRef()
  {
    VarRefImpl varRef = new VarRefImpl();
    return varRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IteratorRangeOrRef createIteratorRangeOrRef()
  {
    IteratorRangeOrRefImpl iteratorRangeOrRef = new IteratorRangeOrRefImpl();
    return iteratorRangeOrRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TimeIteratorRef createTimeIteratorRef()
  {
    TimeIteratorRefImpl timeIteratorRef = new TimeIteratorRefImpl();
    return timeIteratorRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConnectivityDeclarationBlock createConnectivityDeclarationBlock()
  {
    ConnectivityDeclarationBlockImpl connectivityDeclarationBlock = new ConnectivityDeclarationBlockImpl();
    return connectivityDeclarationBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionDeclarationBlock createFunctionDeclarationBlock()
  {
    FunctionDeclarationBlockImpl functionDeclarationBlock = new FunctionDeclarationBlockImpl();
    return functionDeclarationBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InstructionJob createInstructionJob()
  {
    InstructionJobImpl instructionJob = new InstructionJobImpl();
    return instructionJob;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TimeLoopJob createTimeLoopJob()
  {
    TimeLoopJobImpl timeLoopJob = new TimeLoopJobImpl();
    return timeLoopJob;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InstructionBlock createInstructionBlock()
  {
    InstructionBlockImpl instructionBlock = new InstructionBlockImpl();
    return instructionBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Affectation createAffectation()
  {
    AffectationImpl affectation = new AffectationImpl();
    return affectation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Loop createLoop()
  {
    LoopImpl loop = new LoopImpl();
    return loop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public If createIf()
  {
    IfImpl if_ = new IfImpl();
    return if_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Function createFunction()
  {
    FunctionImpl function = new FunctionImpl();
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Reduction createReduction()
  {
    ReductionImpl reduction = new ReductionImpl();
    return reduction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Or createOr()
  {
    OrImpl or = new OrImpl();
    return or;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public And createAnd()
  {
    AndImpl and = new AndImpl();
    return and;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Equality createEquality()
  {
    EqualityImpl equality = new EqualityImpl();
    return equality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Comparison createComparison()
  {
    ComparisonImpl comparison = new ComparisonImpl();
    return comparison;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Plus createPlus()
  {
    PlusImpl plus = new PlusImpl();
    return plus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Minus createMinus()
  {
    MinusImpl minus = new MinusImpl();
    return minus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MulOrDiv createMulOrDiv()
  {
    MulOrDivImpl mulOrDiv = new MulOrDivImpl();
    return mulOrDiv;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Parenthesis createParenthesis()
  {
    ParenthesisImpl parenthesis = new ParenthesisImpl();
    return parenthesis;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnaryMinus createUnaryMinus()
  {
    UnaryMinusImpl unaryMinus = new UnaryMinusImpl();
    return unaryMinus;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Not createNot()
  {
    NotImpl not = new NotImpl();
    return not;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IntConstant createIntConstant()
  {
    IntConstantImpl intConstant = new IntConstantImpl();
    return intConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RealConstant createRealConstant()
  {
    RealConstantImpl realConstant = new RealConstantImpl();
    return realConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BoolConstant createBoolConstant()
  {
    BoolConstantImpl boolConstant = new BoolConstantImpl();
    return boolConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Real2x2Constant createReal2x2Constant()
  {
    Real2x2ConstantImpl real2x2Constant = new Real2x2ConstantImpl();
    return real2x2Constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Real3x3Constant createReal3x3Constant()
  {
    Real3x3ConstantImpl real3x3Constant = new Real3x3ConstantImpl();
    return real3x3Constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RealXCompactConstant createRealXCompactConstant()
  {
    RealXCompactConstantImpl realXCompactConstant = new RealXCompactConstantImpl();
    return realXCompactConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MinConstant createMinConstant()
  {
    MinConstantImpl minConstant = new MinConstantImpl();
    return minConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MaxConstant createMaxConstant()
  {
    MaxConstantImpl maxConstant = new MaxConstantImpl();
    return maxConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionCall createFunctionCall()
  {
    FunctionCallImpl functionCall = new FunctionCallImpl();
    return functionCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReductionCall createReductionCall()
  {
    ReductionCallImpl reductionCall = new ReductionCallImpl();
    return reductionCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BasicType createBasicTypeFromString(EDataType eDataType, String initialValue)
  {
    BasicType result = BasicType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBasicTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ItemType createItemTypeFromString(EDataType eDataType, String initialValue)
  {
    ItemType result = ItemType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertItemTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NablaPackage getNablaPackage()
  {
    return (NablaPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static NablaPackage getPackage()
  {
    return NablaPackage.eINSTANCE;
  }

} //NablaFactoryImpl
