/**
 * generated by Xtext 2.19.0
 */
package fr.cea.nabla.nabla.impl;

import fr.cea.nabla.nabla.NablaPackage;
import fr.cea.nabla.nabla.TimeIterator;
import fr.cea.nabla.nabla.TimeIteratorRef;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Time Iterator Ref</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.cea.nabla.nabla.impl.TimeIteratorRefImpl#getIterator <em>Iterator</em>}</li>
 *   <li>{@link fr.cea.nabla.nabla.impl.TimeIteratorRefImpl#isInit <em>Init</em>}</li>
 *   <li>{@link fr.cea.nabla.nabla.impl.TimeIteratorRefImpl#isNext <em>Next</em>}</li>
 *   <li>{@link fr.cea.nabla.nabla.impl.TimeIteratorRefImpl#getValue <em>Value</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TimeIteratorRefImpl extends MinimalEObjectImpl.Container implements TimeIteratorRef
{
  /**
   * The cached value of the '{@link #getIterator() <em>Iterator</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIterator()
   * @generated
   * @ordered
   */
  protected TimeIterator iterator;

  /**
   * The default value of the '{@link #isInit() <em>Init</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isInit()
   * @generated
   * @ordered
   */
  protected static final boolean INIT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isInit() <em>Init</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isInit()
   * @generated
   * @ordered
   */
  protected boolean init = INIT_EDEFAULT;

  /**
   * The default value of the '{@link #isNext() <em>Next</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNext()
   * @generated
   * @ordered
   */
  protected static final boolean NEXT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNext() <em>Next</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNext()
   * @generated
   * @ordered
   */
  protected boolean next = NEXT_EDEFAULT;

  /**
   * The default value of the '{@link #getValue() <em>Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected static final int VALUE_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getValue() <em>Value</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValue()
   * @generated
   * @ordered
   */
  protected int value = VALUE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TimeIteratorRefImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return NablaPackage.Literals.TIME_ITERATOR_REF;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TimeIterator getIterator()
  {
    if (iterator != null && iterator.eIsProxy())
    {
      InternalEObject oldIterator = (InternalEObject)iterator;
      iterator = (TimeIterator)eResolveProxy(oldIterator);
      if (iterator != oldIterator)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, NablaPackage.TIME_ITERATOR_REF__ITERATOR, oldIterator, iterator));
      }
    }
    return iterator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TimeIterator basicGetIterator()
  {
    return iterator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIterator(TimeIterator newIterator)
  {
    TimeIterator oldIterator = iterator;
    iterator = newIterator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NablaPackage.TIME_ITERATOR_REF__ITERATOR, oldIterator, iterator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isInit()
  {
    return init;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setInit(boolean newInit)
  {
    boolean oldInit = init;
    init = newInit;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NablaPackage.TIME_ITERATOR_REF__INIT, oldInit, init));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isNext()
  {
    return next;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNext(boolean newNext)
  {
    boolean oldNext = next;
    next = newNext;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NablaPackage.TIME_ITERATOR_REF__NEXT, oldNext, next));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setValue(int newValue)
  {
    int oldValue = value;
    value = newValue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, NablaPackage.TIME_ITERATOR_REF__VALUE, oldValue, value));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case NablaPackage.TIME_ITERATOR_REF__ITERATOR:
        if (resolve) return getIterator();
        return basicGetIterator();
      case NablaPackage.TIME_ITERATOR_REF__INIT:
        return isInit();
      case NablaPackage.TIME_ITERATOR_REF__NEXT:
        return isNext();
      case NablaPackage.TIME_ITERATOR_REF__VALUE:
        return getValue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case NablaPackage.TIME_ITERATOR_REF__ITERATOR:
        setIterator((TimeIterator)newValue);
        return;
      case NablaPackage.TIME_ITERATOR_REF__INIT:
        setInit((Boolean)newValue);
        return;
      case NablaPackage.TIME_ITERATOR_REF__NEXT:
        setNext((Boolean)newValue);
        return;
      case NablaPackage.TIME_ITERATOR_REF__VALUE:
        setValue((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case NablaPackage.TIME_ITERATOR_REF__ITERATOR:
        setIterator((TimeIterator)null);
        return;
      case NablaPackage.TIME_ITERATOR_REF__INIT:
        setInit(INIT_EDEFAULT);
        return;
      case NablaPackage.TIME_ITERATOR_REF__NEXT:
        setNext(NEXT_EDEFAULT);
        return;
      case NablaPackage.TIME_ITERATOR_REF__VALUE:
        setValue(VALUE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case NablaPackage.TIME_ITERATOR_REF__ITERATOR:
        return iterator != null;
      case NablaPackage.TIME_ITERATOR_REF__INIT:
        return init != INIT_EDEFAULT;
      case NablaPackage.TIME_ITERATOR_REF__NEXT:
        return next != NEXT_EDEFAULT;
      case NablaPackage.TIME_ITERATOR_REF__VALUE:
        return value != VALUE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (init: ");
    result.append(init);
    result.append(", next: ");
    result.append(next);
    result.append(", value: ");
    result.append(value);
    result.append(')');
    return result.toString();
  }

} //TimeIteratorRefImpl
