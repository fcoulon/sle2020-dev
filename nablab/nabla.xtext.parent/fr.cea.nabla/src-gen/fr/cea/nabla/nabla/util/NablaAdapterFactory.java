/**
 * generated by Xtext 2.19.0
 */
package fr.cea.nabla.nabla.util;

import fr.cea.nabla.nabla.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see fr.cea.nabla.nabla.NablaPackage
 * @generated
 */
public class NablaAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static NablaPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NablaAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = NablaPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NablaSwitch<Adapter> modelSwitch =
    new NablaSwitch<Adapter>()
    {
      @Override
      public Adapter caseNablaModule(NablaModule object)
      {
        return createNablaModuleAdapter();
      }
      @Override
      public Adapter caseImport(Import object)
      {
        return createImportAdapter();
      }
      @Override
      public Adapter caseDeclarationBlock(DeclarationBlock object)
      {
        return createDeclarationBlockAdapter();
      }
      @Override
      public Adapter caseJob(Job object)
      {
        return createJobAdapter();
      }
      @Override
      public Adapter caseInstruction(Instruction object)
      {
        return createInstructionAdapter();
      }
      @Override
      public Adapter caseTimeIterator(TimeIterator object)
      {
        return createTimeIteratorAdapter();
      }
      @Override
      public Adapter caseSpaceIterator(SpaceIterator object)
      {
        return createSpaceIteratorAdapter();
      }
      @Override
      public Adapter caseSpaceIteratorRange(SpaceIteratorRange object)
      {
        return createSpaceIteratorRangeAdapter();
      }
      @Override
      public Adapter caseSpaceIteratorRef(SpaceIteratorRef object)
      {
        return createSpaceIteratorRefAdapter();
      }
      @Override
      public Adapter caseScalarVarDefinition(ScalarVarDefinition object)
      {
        return createScalarVarDefinitionAdapter();
      }
      @Override
      public Adapter caseVarGroupDeclaration(VarGroupDeclaration object)
      {
        return createVarGroupDeclarationAdapter();
      }
      @Override
      public Adapter caseVar(Var object)
      {
        return createVarAdapter();
      }
      @Override
      public Adapter caseScalarVar(ScalarVar object)
      {
        return createScalarVarAdapter();
      }
      @Override
      public Adapter caseArrayVar(ArrayVar object)
      {
        return createArrayVarAdapter();
      }
      @Override
      public Adapter caseConnectivity(Connectivity object)
      {
        return createConnectivityAdapter();
      }
      @Override
      public Adapter caseItemArgType(ItemArgType object)
      {
        return createItemArgTypeAdapter();
      }
      @Override
      public Adapter caseCallable(Callable object)
      {
        return createCallableAdapter();
      }
      @Override
      public Adapter caseFunctionArg(FunctionArg object)
      {
        return createFunctionArgAdapter();
      }
      @Override
      public Adapter caseReductionArg(ReductionArg object)
      {
        return createReductionArgAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseReal2Constant(Real2Constant object)
      {
        return createReal2ConstantAdapter();
      }
      @Override
      public Adapter caseReal3Constant(Real3Constant object)
      {
        return createReal3ConstantAdapter();
      }
      @Override
      public Adapter caseVarRef(VarRef object)
      {
        return createVarRefAdapter();
      }
      @Override
      public Adapter caseIteratorRangeOrRef(IteratorRangeOrRef object)
      {
        return createIteratorRangeOrRefAdapter();
      }
      @Override
      public Adapter caseTimeIteratorRef(TimeIteratorRef object)
      {
        return createTimeIteratorRefAdapter();
      }
      @Override
      public Adapter caseConnectivityDeclarationBlock(ConnectivityDeclarationBlock object)
      {
        return createConnectivityDeclarationBlockAdapter();
      }
      @Override
      public Adapter caseFunctionDeclarationBlock(FunctionDeclarationBlock object)
      {
        return createFunctionDeclarationBlockAdapter();
      }
      @Override
      public Adapter caseInstructionJob(InstructionJob object)
      {
        return createInstructionJobAdapter();
      }
      @Override
      public Adapter caseTimeLoopJob(TimeLoopJob object)
      {
        return createTimeLoopJobAdapter();
      }
      @Override
      public Adapter caseInstructionBlock(InstructionBlock object)
      {
        return createInstructionBlockAdapter();
      }
      @Override
      public Adapter caseAffectation(Affectation object)
      {
        return createAffectationAdapter();
      }
      @Override
      public Adapter caseLoop(Loop object)
      {
        return createLoopAdapter();
      }
      @Override
      public Adapter caseIf(If object)
      {
        return createIfAdapter();
      }
      @Override
      public Adapter caseFunction(Function object)
      {
        return createFunctionAdapter();
      }
      @Override
      public Adapter caseReduction(Reduction object)
      {
        return createReductionAdapter();
      }
      @Override
      public Adapter caseOr(Or object)
      {
        return createOrAdapter();
      }
      @Override
      public Adapter caseAnd(And object)
      {
        return createAndAdapter();
      }
      @Override
      public Adapter caseEquality(Equality object)
      {
        return createEqualityAdapter();
      }
      @Override
      public Adapter caseComparison(Comparison object)
      {
        return createComparisonAdapter();
      }
      @Override
      public Adapter casePlus(Plus object)
      {
        return createPlusAdapter();
      }
      @Override
      public Adapter caseMinus(Minus object)
      {
        return createMinusAdapter();
      }
      @Override
      public Adapter caseMulOrDiv(MulOrDiv object)
      {
        return createMulOrDivAdapter();
      }
      @Override
      public Adapter caseParenthesis(Parenthesis object)
      {
        return createParenthesisAdapter();
      }
      @Override
      public Adapter caseUnaryMinus(UnaryMinus object)
      {
        return createUnaryMinusAdapter();
      }
      @Override
      public Adapter caseNot(Not object)
      {
        return createNotAdapter();
      }
      @Override
      public Adapter caseIntConstant(IntConstant object)
      {
        return createIntConstantAdapter();
      }
      @Override
      public Adapter caseRealConstant(RealConstant object)
      {
        return createRealConstantAdapter();
      }
      @Override
      public Adapter caseBoolConstant(BoolConstant object)
      {
        return createBoolConstantAdapter();
      }
      @Override
      public Adapter caseReal2x2Constant(Real2x2Constant object)
      {
        return createReal2x2ConstantAdapter();
      }
      @Override
      public Adapter caseReal3x3Constant(Real3x3Constant object)
      {
        return createReal3x3ConstantAdapter();
      }
      @Override
      public Adapter caseRealXCompactConstant(RealXCompactConstant object)
      {
        return createRealXCompactConstantAdapter();
      }
      @Override
      public Adapter caseMinConstant(MinConstant object)
      {
        return createMinConstantAdapter();
      }
      @Override
      public Adapter caseMaxConstant(MaxConstant object)
      {
        return createMaxConstantAdapter();
      }
      @Override
      public Adapter caseFunctionCall(FunctionCall object)
      {
        return createFunctionCallAdapter();
      }
      @Override
      public Adapter caseReductionCall(ReductionCall object)
      {
        return createReductionCallAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.NablaModule <em>Module</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.NablaModule
   * @generated
   */
  public Adapter createNablaModuleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.Import <em>Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.Import
   * @generated
   */
  public Adapter createImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.DeclarationBlock <em>Declaration Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.DeclarationBlock
   * @generated
   */
  public Adapter createDeclarationBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.Job <em>Job</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.Job
   * @generated
   */
  public Adapter createJobAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.Instruction <em>Instruction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.Instruction
   * @generated
   */
  public Adapter createInstructionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.TimeIterator <em>Time Iterator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.TimeIterator
   * @generated
   */
  public Adapter createTimeIteratorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.SpaceIterator <em>Space Iterator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.SpaceIterator
   * @generated
   */
  public Adapter createSpaceIteratorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.SpaceIteratorRange <em>Space Iterator Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.SpaceIteratorRange
   * @generated
   */
  public Adapter createSpaceIteratorRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.SpaceIteratorRef <em>Space Iterator Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.SpaceIteratorRef
   * @generated
   */
  public Adapter createSpaceIteratorRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.ScalarVarDefinition <em>Scalar Var Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.ScalarVarDefinition
   * @generated
   */
  public Adapter createScalarVarDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.VarGroupDeclaration <em>Var Group Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.VarGroupDeclaration
   * @generated
   */
  public Adapter createVarGroupDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.Var <em>Var</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.Var
   * @generated
   */
  public Adapter createVarAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.ScalarVar <em>Scalar Var</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.ScalarVar
   * @generated
   */
  public Adapter createScalarVarAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.ArrayVar <em>Array Var</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.ArrayVar
   * @generated
   */
  public Adapter createArrayVarAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.Connectivity <em>Connectivity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.Connectivity
   * @generated
   */
  public Adapter createConnectivityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.ItemArgType <em>Item Arg Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.ItemArgType
   * @generated
   */
  public Adapter createItemArgTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.Callable <em>Callable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.Callable
   * @generated
   */
  public Adapter createCallableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.FunctionArg <em>Function Arg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.FunctionArg
   * @generated
   */
  public Adapter createFunctionArgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.ReductionArg <em>Reduction Arg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.ReductionArg
   * @generated
   */
  public Adapter createReductionArgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.Real2Constant <em>Real2 Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.Real2Constant
   * @generated
   */
  public Adapter createReal2ConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.Real3Constant <em>Real3 Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.Real3Constant
   * @generated
   */
  public Adapter createReal3ConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.VarRef <em>Var Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.VarRef
   * @generated
   */
  public Adapter createVarRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.IteratorRangeOrRef <em>Iterator Range Or Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.IteratorRangeOrRef
   * @generated
   */
  public Adapter createIteratorRangeOrRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.TimeIteratorRef <em>Time Iterator Ref</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.TimeIteratorRef
   * @generated
   */
  public Adapter createTimeIteratorRefAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.ConnectivityDeclarationBlock <em>Connectivity Declaration Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.ConnectivityDeclarationBlock
   * @generated
   */
  public Adapter createConnectivityDeclarationBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.FunctionDeclarationBlock <em>Function Declaration Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.FunctionDeclarationBlock
   * @generated
   */
  public Adapter createFunctionDeclarationBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.InstructionJob <em>Instruction Job</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.InstructionJob
   * @generated
   */
  public Adapter createInstructionJobAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.TimeLoopJob <em>Time Loop Job</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.TimeLoopJob
   * @generated
   */
  public Adapter createTimeLoopJobAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.InstructionBlock <em>Instruction Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.InstructionBlock
   * @generated
   */
  public Adapter createInstructionBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.Affectation <em>Affectation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.Affectation
   * @generated
   */
  public Adapter createAffectationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.Loop <em>Loop</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.Loop
   * @generated
   */
  public Adapter createLoopAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.If <em>If</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.If
   * @generated
   */
  public Adapter createIfAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.Function <em>Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.Function
   * @generated
   */
  public Adapter createFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.Reduction <em>Reduction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.Reduction
   * @generated
   */
  public Adapter createReductionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.Or <em>Or</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.Or
   * @generated
   */
  public Adapter createOrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.And <em>And</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.And
   * @generated
   */
  public Adapter createAndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.Equality <em>Equality</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.Equality
   * @generated
   */
  public Adapter createEqualityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.Comparison <em>Comparison</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.Comparison
   * @generated
   */
  public Adapter createComparisonAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.Plus <em>Plus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.Plus
   * @generated
   */
  public Adapter createPlusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.Minus <em>Minus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.Minus
   * @generated
   */
  public Adapter createMinusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.MulOrDiv <em>Mul Or Div</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.MulOrDiv
   * @generated
   */
  public Adapter createMulOrDivAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.Parenthesis <em>Parenthesis</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.Parenthesis
   * @generated
   */
  public Adapter createParenthesisAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.UnaryMinus <em>Unary Minus</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.UnaryMinus
   * @generated
   */
  public Adapter createUnaryMinusAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.Not <em>Not</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.Not
   * @generated
   */
  public Adapter createNotAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.IntConstant <em>Int Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.IntConstant
   * @generated
   */
  public Adapter createIntConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.RealConstant <em>Real Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.RealConstant
   * @generated
   */
  public Adapter createRealConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.BoolConstant <em>Bool Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.BoolConstant
   * @generated
   */
  public Adapter createBoolConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.Real2x2Constant <em>Real2x2 Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.Real2x2Constant
   * @generated
   */
  public Adapter createReal2x2ConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.Real3x3Constant <em>Real3x3 Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.Real3x3Constant
   * @generated
   */
  public Adapter createReal3x3ConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.RealXCompactConstant <em>Real XCompact Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.RealXCompactConstant
   * @generated
   */
  public Adapter createRealXCompactConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.MinConstant <em>Min Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.MinConstant
   * @generated
   */
  public Adapter createMinConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.MaxConstant <em>Max Constant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.MaxConstant
   * @generated
   */
  public Adapter createMaxConstantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.FunctionCall <em>Function Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.FunctionCall
   * @generated
   */
  public Adapter createFunctionCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.cea.nabla.nabla.ReductionCall <em>Reduction Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.cea.nabla.nabla.ReductionCall
   * @generated
   */
  public Adapter createReductionCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //NablaAdapterFactory
