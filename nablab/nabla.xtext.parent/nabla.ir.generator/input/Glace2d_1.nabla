module Glace2d;

with Math.*;

connectivities {
	nodes1: (∅) → {node};
	cells1: (∅) → {cell};
	outerFaces1: (∅) → {face};
	innerNodes1: (∅) → {node};
	nodesOfCell1: (cell) → {node};
	cellsOfNode1: (node) → {cell};
	nodesOfFace1: (face) → {node};
}

functions {
	trace1: (ℝ²ˣ²) → ℝ;
	perp1: (ℝ²) → ℝ²;
	tensProduct1: (ℝ², ℝ²) → ℝ²ˣ²;
	matVectProduct1: (ℝ²ˣ², ℝ²) → ℝ²;
	inverse1: (ℝ²ˣ²) → ℝ²ˣ²;
}


// Options obligatoires pour générer
const ℝ LENGTH1 = 0.01;
const ℕ X_EDGE_ELEMS1 = 100;
const ℕ Y_EDGE_ELEMS1 = 10;
const ℕ Z_EDGE_ELEMS1 = 1;
const ℝ option_stoptime1 = 0.2;
const ℕ option_max_iterations1 = 20000;

// Autres options
const ℝ γ1 = 1.4;
const ℝ option_x_interface1 = 0.5;
const ℝ option_δt_ini1 = 1.0e-5;
const ℝ option_δt_cfl1 = 0.4;
const ℝ option_ρ_ini_zg1 = 1.0;
const ℝ option_ρ_ini_zd1 = 0.125;
const ℝ option_p_ini_zg1 = 1.0;
const ℝ option_p_ini_zd1 = 0.1;

ℝ t1=0.0;
ℝ δt1=0.0;

ℝ² coord1[nodes1], X1[nodes1], b1[nodes1], bt1[nodes1];
ℝ²ˣ² Ar1[nodes1], Mt1[nodes1];
ℝ² ur1[nodes1];
ℝ p_ic1[cells1], ρ_ic1[cells1], V_ic1[cells1];
ℝ c1[cells1], m1[cells1], p1[cells1], ρ1[cells1], e1[cells1], E1[cells1], V1[cells1];
ℝ δtj1[cells1];
ℝ² uj1[cells1], center1[cells1];
ℝ l1[cells1, nodesOfCell1];
ℝ² C_ic1[cells1, nodesOfCell1], C1[cells1, nodesOfCell1], F1[cells1, nodesOfCell1];
ℝ²ˣ² Ajr1[cells1, nodesOfCell1];


// *************************************************************
// * Init: X_ic(par le mailleur), ρ_ic, p_ic, V_ic & m
// *************************************************************
IniCenter1: ∀j1∈cells1(), center1{j1} = (1.0/4.0) * ∑{r1∈nodesOfCell1(j1)}(coord1{r1});
IniIc1: ∀j1∈cells1(), if (center1{j1}.x < option_x_interface1) {
  ρ_ic1{j1}=option_ρ_ini_zg1;
  p_ic1{j1}=option_p_ini_zg1;
} else {
  ρ_ic1{j1}=option_ρ_ini_zd1;
  p_ic1{j1}=option_p_ini_zd1;
}

ComputeCjrIc1: ∀j1∈cells1(), ∀r1∈nodesOfCell1(j1), 
	C_ic1{j1,r1} = 0.5 * perp1(coord1{►(r1)} - coord1{◄(r1)});
IniVIc1: ∀j1∈cells1(), V_ic1{j1} = 0.5 * ∑{r1∈nodesOfCell1(j1)}(dot(C_ic1{j1,r1}, coord1{r1}));
IniM1: ∀j1∈cells1(), m1{j1} = ρ_ic1{j1} * V_ic1{j1}; // m est constant


// *************************************************************
// * Calcul des C{j,r} et des variables qui en découlent
// *************************************************************
ComputeCjr1: ∀j1∈cells1(), ∀r1∈nodesOfCell1(j1), C1{j1,r1} = 0.5 * perp1(X1{►(r1)} - X1{◄(r1)});
ComputeLjr1: ∀j1∈cells1(), ∀r1∈nodesOfCell1(j1), l1{j1,r1} = norm(C1{j1,r1});
Computeδtj1: ∀j1∈cells1(), δtj1{j1} = 2.0 * V1{j1} / (c1{j1} * ∑{r1∈nodesOfCell1(j1)}(l1{j1,r1}));

// *************************************************************
// * Règles EOS standards: m, ρ, c, p, e
// *************************************************************
ComputeDensity1: ∀j1∈cells1(), ρ1{j1} = m1{j1} / V1{j1};
ComputeEOSp1: ∀j1∈cells1(), p1{j1} = (γ1-1.0) * ρ1{j1} * e1{j1};
ComputeInternalEngergy1: ∀j1∈cells1(), e1{j1} = E1{j1} - 0.5 * dot(uj1{j1}, uj1{j1});
ComputeEOSc1: ∀j1∈cells1(), c1{j1} = √(γ1*p1{j1}/ρ1{j1}); 

// *************************************************************
// * Cell-centered Godunov Scheme for Lagragian gas dynamics
// *************************************************************
ComputeAjr1: ∀j1∈cells1(), ∀r1∈nodesOfCell1(j1), Ajr1{j1,r1} = ((ρ1{j1}*c1{j1})/l1{j1,r1}) * tensProduct1(C1{j1,r1}, C1{j1,r1});
ComputeFjr1: ∀j1∈cells1(), ∀r1∈nodesOfCell1(j1), F1{j1,r1} = p1{j1}*C1{j1,r1} + matVectProduct1(Ajr1{j1,r1}, (uj1{j1}-ur1{r1}));
ComputeAr1: ∀r1∈nodes1(), Ar1{r1} = ∑{j1∈cellsOfNode1(r1)}(Ajr1{j1,r1});
ComputeBr1: ∀r1∈nodes1(), b1{r1} = ∑{j1∈cellsOfNode1(r1)}(p1{j1}*C1{j1,r1} + matVectProduct1(Ajr1{j1,r1}, uj1{j1}));
ComputeMt1: ∀r1∈innerNodes1(), Mt1{r1} = Ar1{r1};
ComputeBt1: ∀r1∈innerNodes1(), bt1{r1} = b1{r1};

OuterFacesComputations1: ∀k1∈outerFaces1(), {
	const ℝ epsilon1 = 1.0e-10;
	ℝ²ˣ² I1 = {{1.0,0.0},{0.0,1.0}};

	ℝ X_MIN1 = 0.0;
	ℝ X_MAX1 = X_EDGE_ELEMS1 * LENGTH1;
	ℝ Y_MIN1 = 0.0; 
	ℝ Y_MAX1 = Y_EDGE_ELEMS1 * LENGTH1;
	ℝ² nY1 = {0.0,1.0};
	
	∀r1∈nodesOfFace1(k1), {
		// Y boundary conditions (must be done before X)
		if ((X1{r1}.y-Y_MIN1 < epsilon1) || (X1{r1}.y-Y_MAX1 < epsilon1)) {
			ℝ sign1 = 0.0;
			if (X1{r1}.y-Y_MIN1 < epsilon1) sign1 = -1.0;
			else sign1 = 1.0;
			ℝ² n1 = sign1 * nY1;
      		ℝ²ˣ² nxn1 = tensProduct1(n1,n1);
      		ℝ²ˣ² IcP1 = I1 - nxn1;
			bt1{r1} = matVectProduct1(IcP1, b1{r1});
			Mt1{r1} = IcP1 * (Ar1{r1} * IcP1) + nxn1*trace1(Ar1{r1});
		}

		// X boundary conditions
		if ((Math.fabs(X1{r1}.x-X_MIN1) < epsilon1) || ( (Math.fabs(X1{r1}.x-X_MAX1) < epsilon1) )) {
			Mt1{r1} = I1;
			bt1{r1} = {0.0, 0.0};
		}
	}
}


ComputeU1: ∀r1∈nodes1(), ur1{r1} = matVectProduct1(inverse1(Mt1{r1}), bt1{r1});
ComputeV1: ∀j1∈cells1(), V1{j1} = 0.5 * ∑{r1∈nodesOfCell1(j1)}(dot(C1{j1,r1},X1{r1}));

// *************************************************************
// * Itérations de la boucle en 'n'
// * Et calcule du δt pour mise-à-jour du temps de la simulation
// *************************************************************
ComputeXn1: ∀n1∈ℕ, ∀r01∈nodes1(), X1{r01}^{n1=0}=coord1{r01}; , ∀r1∈nodes1(), X1{r1}^{n1+1}=X1{r1}^{n1}+δt1^{n1}*ur1{r1};
ComputeUn1: ∀n1∈ℕ, ∀j01∈cells1(), uj1{j01}^{n1=0}={0.0,0.0}; , ∀j1∈cells1(), uj1{j1}^{n1+1}=uj1{j1}^{n1}-(δt1^{n1}/m1{j1})*∑{r1∈nodesOfCell1(j1)}(F1{j1,r1});
ComputeEn1: ∀n1∈ℕ, ∀j01∈cells1(), E1{j01}^{n1=0}=p_ic1{j01}/((γ1-1.0)*ρ_ic1{j01}); , ∀j1∈cells1(), E1{j1}^{n1+1}=E1{j1}^{n1} - (δt1^{n1} / m1{j1}) * ∑{r1∈nodesOfCell1(j1)}(dot(F1{j1,r1},ur1{r1}));
ComputeDt1: ∀n1∈ℕ, δt1^{n1=0}=option_δt_ini1;, δt1^{n1+1}=option_δt_cfl1*reduceMin{j1∈cells1()}(δtj1{j1});
ComputeTn1: ∀n1∈ℕ, t1^{n1=0}=0.0; , t1^{n1+1}=t1^{n1}+δt1^{n1+1};

